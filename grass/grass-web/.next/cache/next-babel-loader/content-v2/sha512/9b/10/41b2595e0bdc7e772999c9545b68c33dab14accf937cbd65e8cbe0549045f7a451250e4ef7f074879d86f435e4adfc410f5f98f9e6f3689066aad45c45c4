{"ast":null,"code":"import _defineProperty from \"/Users/alan/Desktop/Projects/tutorial-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alan/Desktop/Projects/tutorial-web/src/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ChakraProvider, ColorModeProvider } from \"@chakra-ui/react\";\nimport { Provider, createClient } from \"urql\";\nimport theme from \"../theme\";\n\nfunction betterUpdateQuery(cache, qi, result, fn) {\n  return cache.updateQuery(qi, function (data) {\n    return fn(result, data);\n  });\n}\n\nvar client = createClient({});\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: client,\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      resetCSS: true,\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n        options: {\n          useSystemColorMode: true\n        },\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/alan/Desktop/Projects/tutorial-web/src/pages/_app.tsx"],"names":["ChakraProvider","ColorModeProvider","Provider","createClient","theme","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","client","MyApp","Component","pageProps","useSystemColorMode"],"mappings":";;;;;;;;AAAA,SAASA,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAqE,MAArE;AAGA,OAAOC,KAAP,MAAkB,UAAlB;;AASA,SAASC,iBAAT,CACEC,KADF,EAEEC,EAFF,EAGEC,MAHF,EAIEC,EAJF,EAKE;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkBH,EAAlB,EAAsB,UAACI,IAAD;AAAA,WAAUF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAZ;AAAA,GAAtB,CAAP;AACD;;AAED,IAAMC,MAAM,GAAGT,YAAY,CAAC,EAAD,CAA3B;;AAEA,SAASU,KAAT,OAA8C;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,SAAkB,QAAlBA,SAAkB;AAC5C,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEH,MAAjB;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,QAAQ,MAAxB;AAAyB,MAAA,KAAK,EAAER,KAAhC;AAAA,6BACE,QAAC,iBAAD;AACE,QAAA,OAAO,EAAE;AACPY,UAAAA,kBAAkB,EAAE;AADb,SADX;AAAA,+BAKE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;KAdQF,K;AAgBT,eAAeA,KAAf","sourcesContent":["import { ChakraProvider, ColorModeProvider } from \"@chakra-ui/react\";\nimport { Provider, createClient, fetchExchange, dedupExchange } from \"urql\";\nimport { cacheExchange, Cache, QueryInput } from \"@urql/exchange-graphcache\";\n\nimport theme from \"../theme\";\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n} from \"../generated/graphql\";\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query\n) {\n  return cache.updateQuery(qi, (data) => fn(result, data as any) as any);\n}\n\nconst client = createClient({});\n\nfunction MyApp({ Component, pageProps }: any) {\n  return (\n    <Provider value={client}>\n      <ChakraProvider resetCSS theme={theme}>\n        <ColorModeProvider\n          options={{\n            useSystemColorMode: true,\n          }}\n        >\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ChakraProvider>\n    </Provider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}