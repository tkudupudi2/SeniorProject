{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const RegularProductFragmentDoc = gql`\n    fragment RegularProduct on Product {\n  _id\n  name\n  price\n  storeName\n  image\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  _id\n  username\n}\n    `;\nexport const LoginDocument = gql`\n    mutation Login($options: UsernamePasswordInput!) {\n  login(options: $options) {\n    user {\n      ...RegularUser\n    }\n    errors {\n      message\n      field\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useLoginMutation() {\n  return Urql.useMutation(LoginDocument);\n}\n;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport function useLogoutMutation() {\n  return Urql.useMutation(LogoutDocument);\n}\n;\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!, $email: String!) {\n  register(options: {username: $username, password: $password, email: $email}) {\n    errors {\n      field\n      message\n    }\n    user {\n      ...RegularUser\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useMeQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: MeDocument\n  }, options));\n}\n;\nexport const ProductsDocument = gql`\n    query Products {\n  products {\n    ...RegularProduct\n  }\n}\n    ${RegularProductFragmentDoc}`;\nexport function useProductsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: ProductsDocument\n  }, options));\n}\n;","map":null,"metadata":{},"sourceType":"module"}