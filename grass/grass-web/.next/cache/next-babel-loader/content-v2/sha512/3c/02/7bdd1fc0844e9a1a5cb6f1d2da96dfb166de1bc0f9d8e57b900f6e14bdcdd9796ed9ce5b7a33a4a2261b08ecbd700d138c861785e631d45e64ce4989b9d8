{"ast":null,"code":"import { dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { pipe, tap } from \"wonka\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport Router from \"next/router\";\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error !== null && error !== void 0 && error.message.includes(\"not auth\")) {\n      Router.replace(\"/login\");\n    }\n  }));\n};\n\nimport { stringifyVariables } from \"@urql/core\";\nexport const simplePagination = ({\n  offsetArgument = \"skip\",\n  limitArgument = \"limit\",\n  mergeMode = \"after\"\n} = {}) => {\n  const compareArgs = (fieldArgs, connectionArgs) => {\n    for (const key in connectionArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      } else if (!(key in fieldArgs)) {\n        return false;\n      }\n\n      const argA = fieldArgs[key];\n      const argB = connectionArgs[key];\n\n      if (typeof argA !== typeof argB || typeof argA !== \"object\" ? argA !== argB : stringifyVariables(argA) !== stringifyVariables(argB)) {\n        return false;\n      }\n    }\n\n    for (const key in fieldArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      }\n\n      if (!(key in connectionArgs)) return false;\n    }\n\n    return true;\n  };\n\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const visited = new Set();\n    let result = [];\n    let prevOffset = null;\n\n    for (let i = 0; i < size; i++) {\n      const {\n        fieldKey,\n        arguments: args\n      } = fieldInfos[i];\n\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const links = cache.resolve(entityKey, fieldKey);\n      const currentOffset = args[offsetArgument];\n\n      if (links === null || links.length === 0 || typeof currentOffset !== \"number\") {\n        continue;\n      }\n\n      const tempResult = [];\n\n      for (let j = 0; j < links.length; j++) {\n        const link = links[j];\n        if (visited.has(link)) continue;\n        tempResult.push(link);\n        visited.add(link);\n      }\n\n      if ((!prevOffset || currentOffset > prevOffset) === (mergeMode === \"after\")) {\n        result = [...result, ...tempResult];\n      } else {\n        result = [...tempResult, ...result];\n      }\n\n      prevOffset = currentOffset;\n    }\n\n    const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n\n    if (hasCurrentPage) {\n      return result;\n    } else if (!info.store.schema) {\n      return undefined;\n    } else {\n      info.partial = true;\n      return result;\n    }\n  };\n};\nexport const createUrqlClient = ssrExchange => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        },\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), errorExchange, ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["/Users/alan/Desktop/Projects/SeniorProject/grass/grass-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","cacheExchange","MeDocument","pipe","tap","betterUpdateQuery","Router","errorExchange","forward","ops$","error","message","includes","replace","stringifyVariables","simplePagination","offsetArgument","limitArgument","mergeMode","compareArgs","fieldArgs","connectionArgs","key","argA","argB","_parent","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","visited","Set","result","prevOffset","i","fieldKey","arguments","args","links","resolve","currentOffset","tempResult","j","link","has","push","add","hasCurrentPage","store","schema","partial","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","query","me","login","errors","user","register"],"mappings":"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","sourcesContent":["import { dedupExchange, Exchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport {\n  LogoutMutation,\n  MeQuery,\n  MeDocument,\n  LoginMutation,\n  RegisterMutation,\n} from \"../generated/graphql\";\nimport { pipe, tap } from \"wonka\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport Router from \"next/router\";\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes(\"not auth\")) {\n        Router.replace(\"/login\");\n      }\n    })\n  );\n};\n\nimport { stringifyVariables } from \"@urql/core\";\nimport { Resolver, Variables, NullArray } from \"../types\";\n\nexport type MergeMode = \"before\" | \"after\";\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n  limitArgument?: string;\n  mergeMode?: MergeMode;\n}\n\nexport const simplePagination = ({\n  offsetArgument = \"skip\",\n  limitArgument = \"limit\",\n  mergeMode = \"after\",\n}: PaginationParams = {}): Resolver => {\n  const compareArgs = (\n    fieldArgs: Variables,\n    connectionArgs: Variables\n  ): boolean => {\n    for (const key in connectionArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      } else if (!(key in fieldArgs)) {\n        return false;\n      }\n\n      const argA = fieldArgs[key];\n      const argB = connectionArgs[key];\n\n      if (\n        typeof argA !== typeof argB || typeof argA !== \"object\"\n          ? argA !== argB\n          : stringifyVariables(argA) !== stringifyVariables(argB)\n      ) {\n        return false;\n      }\n    }\n\n    for (const key in fieldArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      }\n      if (!(key in connectionArgs)) return false;\n    }\n\n    return true;\n  };\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const visited = new Set();\n    let result: NullArray<string> = [];\n    let prevOffset: number | null = null;\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const links = cache.resolve(entityKey, fieldKey) as string[];\n      const currentOffset = args[offsetArgument];\n\n      if (\n        links === null ||\n        links.length === 0 ||\n        typeof currentOffset !== \"number\"\n      ) {\n        continue;\n      }\n\n      const tempResult: NullArray<string> = [];\n\n      for (let j = 0; j < links.length; j++) {\n        const link = links[j];\n        if (visited.has(link)) continue;\n        tempResult.push(link);\n        visited.add(link);\n      }\n\n      if (\n        (!prevOffset || currentOffset > prevOffset) ===\n        (mergeMode === \"after\")\n      ) {\n        result = [...result, ...tempResult];\n      } else {\n        result = [...tempResult, ...result];\n      }\n\n      prevOffset = currentOffset;\n    }\n\n    const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    if (hasCurrentPage) {\n      return result;\n    } else if (!(info as any).store.schema) {\n      return undefined;\n    } else {\n      info.partial = true;\n      return result;\n    }\n  };\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}