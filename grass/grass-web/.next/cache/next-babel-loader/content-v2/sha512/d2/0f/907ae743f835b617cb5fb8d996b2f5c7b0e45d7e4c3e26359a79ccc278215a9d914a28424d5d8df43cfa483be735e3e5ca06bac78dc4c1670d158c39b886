{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const RegularProductFragmentDoc = gql`\n    fragment RegularProduct on Product {\n  _id\n  name\n  price\n  storeName\n  image\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  _id\n  username\n}\n    `;\nexport const LoginDocument = gql`\n    mutation Login($options: UsernamePasswordInput!) {\n  login(options: $options) {\n    user {\n      ...RegularUser\n    }\n    errors {\n      message\n      field\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useLoginMutation() {\n  return Urql.useMutation(LoginDocument);\n}\n;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport function useLogoutMutation() {\n  return Urql.useMutation(LogoutDocument);\n}\n;\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!, $email: String!) {\n  register(options: {username: $username, password: $password, email: $email}) {\n    errors {\n      field\n      message\n    }\n    user {\n      ...RegularUser\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useMeQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: MeDocument\n  }, options));\n}\n;\nexport const ProductsDocument = gql`\n    query Products {\n  products {\n    ...RegularProduct\n  }\n}\n    ${RegularProductFragmentDoc}`;\nexport function useProductsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: ProductsDocument\n  }, options));\n}\n;","map":{"version":3,"sources":["/Users/alan/Desktop/Projects/SeniorProject/grass/grass-web/src/generated/graphql.ts"],"names":["gql","Urql","RegularProductFragmentDoc","RegularUserFragmentDoc","LoginDocument","useLoginMutation","useMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","MeDocument","useMeQuery","options","useQuery","query","ProductsDocument","useProductsQuery"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAmMA,OAAO,MAAMC,yBAAyB,GAAGF,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KARO;AASP,OAAO,MAAMG,sBAAsB,GAAGH,GAAI;AAC1C;AACA;AACA;AACA;AACA,KALO;AAMP,OAAO,MAAMI,aAAa,GAAGJ,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,sBAAuB,EAZtB;AAcP,OAAO,SAASE,gBAAT,GAA4B;AACjC,SAAOJ,IAAI,CAACK,WAAL,CAAwDF,aAAxD,CAAP;AACD;AAAA;AACD,OAAO,MAAMG,cAAc,GAAGP,GAAI;AAClC;AACA;AACA;AACA,KAJO;AAMP,OAAO,SAASQ,iBAAT,GAA6B;AAClC,SAAOP,IAAI,CAACK,WAAL,CAA0DC,cAA1D,CAAP;AACD;AAAA;AACD,OAAO,MAAME,gBAAgB,GAAGT,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,sBAAuB,EAZtB;AAcP,OAAO,SAASO,mBAAT,GAA+B;AACpC,SAAOT,IAAI,CAACK,WAAL,CAA8DG,gBAA9D,CAAP;AACD;AAAA;AACD,OAAO,MAAME,UAAU,GAAGX,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,MAAMG,sBAAuB,EANtB;AAQP,OAAO,SAASS,UAAT,CAAoBC,OAA2D,GAAG,EAAlF,EAAsF;AAC3F,SAAOZ,IAAI,CAACa,QAAL;AAAyBC,IAAAA,KAAK,EAAEJ;AAAhC,KAA+CE,OAA/C,EAAP;AACD;AAAA;AACD,OAAO,MAAMG,gBAAgB,GAAGhB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA,MAAME,yBAA0B,EANzB;AAQP,OAAO,SAASe,gBAAT,CAA0BJ,OAAiE,GAAG,EAA9F,EAAkG;AACvG,SAAOZ,IAAI,CAACa,QAAL;AAA+BC,IAAAA,KAAK,EAAEC;AAAtC,KAA2DH,OAA3D,EAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n  createProduct: Product;\n  updateProduct?: Maybe<Product>;\n  deleteProduct: Scalars['Boolean'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationCreateProductArgs = {\n  weight?: Maybe<Scalars['Float']>;\n  pricePerPound?: Maybe<Scalars['Float']>;\n  category: Scalars['String'];\n  storeName: Scalars['String'];\n  image: Scalars['String'];\n  price: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  storeName: Scalars['String'];\n  image: Scalars['String'];\n  price: Scalars['Float'];\n  name: Scalars['String'];\n  _id: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  _id: Scalars['String'];\n};\n\nexport type Product = {\n  __typename?: 'Product';\n  _id: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  name: Scalars['String'];\n  category: Scalars['String'];\n  image: Scalars['String'];\n  storeName: Scalars['String'];\n  price: Scalars['Float'];\n  pricePerPound: Scalars['Float'];\n  weight: Scalars['Float'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<User>;\n  product?: Maybe<Product>;\n  products: Array<Product>;\n};\n\n\nexport type QueryProductArgs = {\n  _id: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  _id: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  homeAddress: Scalars['String'];\n  phoneNumber: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type UsernamePasswordInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type RegularProductFragment = (\n  { __typename?: 'Product' }\n  & Pick<Product, '_id' | 'name' | 'price' | 'storeName' | 'image'>\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, '_id' | 'username'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & { user?: Maybe<(\n      { __typename?: 'User' }\n      & RegularUserFragment\n    )>, errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'message' | 'field'>\n    )>> }\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'User' }\n      & RegularUserFragment\n    )> }\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type ProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProductsQuery = (\n  { __typename?: 'Query' }\n  & { products: Array<(\n    { __typename?: 'Product' }\n    & RegularProductFragment\n  )> }\n);\n\nexport const RegularProductFragmentDoc = gql`\n    fragment RegularProduct on Product {\n  _id\n  name\n  price\n  storeName\n  image\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  _id\n  username\n}\n    `;\nexport const LoginDocument = gql`\n    mutation Login($options: UsernamePasswordInput!) {\n  login(options: $options) {\n    user {\n      ...RegularUser\n    }\n    errors {\n      message\n      field\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\n\nexport function useLoginMutation() {\n  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);\n};\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\nexport function useLogoutMutation() {\n  return Urql.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument);\n};\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!, $email: String!) {\n  register(options: {username: $username, password: $password, email: $email}) {\n    errors {\n      field\n      message\n    }\n    user {\n      ...RegularUser\n    }\n  }\n}\n    ${RegularUserFragmentDoc}`;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n};\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\n\nexport function useMeQuery(options: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<MeQuery>({ query: MeDocument, ...options });\n};\nexport const ProductsDocument = gql`\n    query Products {\n  products {\n    ...RegularProduct\n  }\n}\n    ${RegularProductFragmentDoc}`;\n\nexport function useProductsQuery(options: Omit<Urql.UseQueryArgs<ProductsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<ProductsQuery>({ query: ProductsDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}