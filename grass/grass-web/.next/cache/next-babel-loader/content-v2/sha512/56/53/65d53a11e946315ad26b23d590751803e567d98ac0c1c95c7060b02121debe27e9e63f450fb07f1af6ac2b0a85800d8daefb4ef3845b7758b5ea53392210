{"ast":null,"code":"import _toConsumableArray from \"/Users/alan/Desktop/Projects/SeniorProject/grass/grass-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { pipe, tap } from \"wonka\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport Router from \"next/router\";\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error !== null && error !== void 0 && error.message.includes(\"not auth\")) {\n        Router.replace(\"/login\");\n      }\n    }));\n  };\n};\n\nexport var cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    var allFields = cache.inspectFields(entityKey);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    var isItInCache = cache.resolve(entityKey, \"\".concat(fieldName, \"(\").concat(stringifyVariables(fieldArgs), \")\"));\n    info.partial = !isItInCache;\n    var hasMore = true;\n    var results = [];\n    fieldInfos.forEach(function (fi) {\n      var data = cache.resolve(entityKey, fi.fieldKey);\n\n      var _hasMore = cache.resolve(entityKey, \"hasMore\");\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push.apply(results, _toConsumableArray(data));\n      console.log(data);\n    });\n    return {\n      hasMore: hasMore\n    }; //   const visited = new Set();\n    //   let result: NullArray<string> = [];\n    //   let prevOffset: number | null = null;\n    //   for (let i = 0; i < size; i++) {\n    //     const { fieldKey, arguments: args } = fieldInfos[i];\n    //     if (args === null || !compareArgs(fieldArgs, args)) {\n    //       continue;\n    //     }\n    //     const links = cache.resolve(entityKey, fieldKey) as string[];\n    //     const currentOffset = args[cursorArgument];\n    //     if (\n    //       links === null ||\n    //       links.length === 0 ||\n    //       typeof currentOffset !== \"number\"\n    //     ) {\n    //       continue;\n    //     }\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     if (\n    //       (!prevOffset || currentOffset > prevOffset) ===\n    //       (mergeMode === \"after\")\n    //     ) {\n    //       result = [...result, ...tempResult];\n    //     } else {\n    //       result = [...tempResult, ...result];\n    //     }\n    //     prevOffset = currentOffset;\n    //   }\n    //   const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    //   if (hasCurrentPage) {\n    //     return result;\n    //   } else if (!(info as any).store.schema) {\n    //     return undefined;\n    //   } else {\n    //     info.partial = true;\n    //     return result;\n    //   }\n  };\n};\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\"\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      resolvers: {\n        Query: {\n          products: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/Users/alan/Desktop/Projects/SeniorProject/grass/grass-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","stringifyVariables","cacheExchange","MeDocument","pipe","tap","betterUpdateQuery","Router","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","isItInCache","resolve","partial","hasMore","results","forEach","fi","data","fieldKey","_hasMore","push","console","log","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","products","updates","Mutation","logout","_result","args","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import {\n  dedupExchange,\n  Exchange,\n  fetchExchange,\n  stringifyVariables,\n} from \"urql\";\nimport { cacheExchange, Resolver } from \"@urql/exchange-graphcache\";\nimport {\n  LogoutMutation,\n  MeQuery,\n  MeDocument,\n  LoginMutation,\n  RegisterMutation,\n} from \"../generated/graphql\";\nimport { pipe, tap } from \"wonka\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport Router from \"next/router\";\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes(\"not auth\")) {\n        Router.replace(\"/login\");\n      }\n    })\n  );\n};\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const isItInCache = cache.resolve(\n      entityKey,\n      `${fieldName}(${stringifyVariables(fieldArgs)})`\n    );\n    info.partial = !isItInCache;\n    let hasMore = true;\n    const results: string[] = [];\n    fieldInfos.forEach((fi) => {\n      const data = cache.resolve(entityKey, fi.fieldKey) as string[];\n      const _hasMore = cache.resolve(entityKey, \"hasMore\");\n      if (!_hasMore) {\n        hasMore = _hasMore as boolean;\n      }\n      results.push(...data);\n      console.log(data);\n    });\n\n    return {\n      hasMore,\n    };\n\n    //   const visited = new Set();\n    //   let result: NullArray<string> = [];\n    //   let prevOffset: number | null = null;\n\n    //   for (let i = 0; i < size; i++) {\n    //     const { fieldKey, arguments: args } = fieldInfos[i];\n    //     if (args === null || !compareArgs(fieldArgs, args)) {\n    //       continue;\n    //     }\n\n    //     const links = cache.resolve(entityKey, fieldKey) as string[];\n    //     const currentOffset = args[cursorArgument];\n\n    //     if (\n    //       links === null ||\n    //       links.length === 0 ||\n    //       typeof currentOffset !== \"number\"\n    //     ) {\n    //       continue;\n    //     }\n\n    //     const tempResult: NullArray<string> = [];\n\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n\n    //     if (\n    //       (!prevOffset || currentOffset > prevOffset) ===\n    //       (mergeMode === \"after\")\n    //     ) {\n    //       result = [...result, ...tempResult];\n    //     } else {\n    //       result = [...tempResult, ...result];\n    //     }\n\n    //     prevOffset = currentOffset;\n    //   }\n\n    //   const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    //   if (hasCurrentPage) {\n    //     return result;\n    //   } else if (!(info as any).store.schema) {\n    //     return undefined;\n    //   } else {\n    //     info.partial = true;\n    //     return result;\n    //   }\n  };\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      resolvers: {\n        Query: {\n          products: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}