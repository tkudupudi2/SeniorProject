{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"/Users/alan/Desktop/Projects/tutorial-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/Users/alan/Desktop/Projects/tutorial-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/alan/Desktop/Projects/tutorial-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FormControl, FormLabel, Input } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { useField } from \"formik\";\nimport { FormErrorMessage } from \"@chakra-ui/react\";\nexport var InputField = function InputField(_ref) {\n  var label = _ref.label,\n      _ = _ref.size,\n      props = _objectWithoutProperties(_ref, [\"label\", \"size\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  return /*#__PURE__*/_jsxs(FormControl, {\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsx(FormLabel, {\n      htmlFor: field.name,\n      children: label\n    }), /*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread(_objectSpread({}, field), props), {}, {\n      id: field.name\n    })), error ? /*#__PURE__*/_jsx(FormErrorMessage, {\n      children: error\n    }) : null]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}