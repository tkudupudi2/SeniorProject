{"ast":null,"code":"import { dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { pipe, tap } from \"wonka\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport Router from \"next/router\";\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error !== null && error !== void 0 && error.message.includes(\"not auth\")) {\n      Router.replace(\"/login\");\n    }\n  }));\n};\n\nexport const cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    fieldInfos.forEach(fi => {\n      cache.resolve(entityKey, fieldName);\n    }); //   const visited = new Set();\n    //   let result: NullArray<string> = [];\n    //   let prevOffset: number | null = null;\n    //   for (let i = 0; i < size; i++) {\n    //     const { fieldKey, arguments: args } = fieldInfos[i];\n    //     if (args === null || !compareArgs(fieldArgs, args)) {\n    //       continue;\n    //     }\n    //     const links = cache.resolve(entityKey, fieldKey) as string[];\n    //     const currentOffset = args[cursorArgument];\n    //     if (\n    //       links === null ||\n    //       links.length === 0 ||\n    //       typeof currentOffset !== \"number\"\n    //     ) {\n    //       continue;\n    //     }\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     if (\n    //       (!prevOffset || currentOffset > prevOffset) ===\n    //       (mergeMode === \"after\")\n    //     ) {\n    //       result = [...result, ...tempResult];\n    //     } else {\n    //       result = [...tempResult, ...result];\n    //     }\n    //     prevOffset = currentOffset;\n    //   }\n    //   const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    //   if (hasCurrentPage) {\n    //     return result;\n    //   } else if (!(info as any).store.schema) {\n    //     return undefined;\n    //   } else {\n    //     info.partial = true;\n    //     return result;\n    //   }\n  };\n};\nexport const createUrqlClient = ssrExchange => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    resolvers: {\n      Query: {\n        products: cursorPagination()\n      }\n    },\n    updates: {\n      Mutation: {\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        },\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), errorExchange, ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["/Users/alan/Desktop/Projects/SeniorProject/grass/grass-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","cacheExchange","MeDocument","pipe","tap","betterUpdateQuery","Router","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","forEach","fi","resolve","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","products","updates","Mutation","logout","_result","args","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import { dedupExchange, Exchange, fetchExchange } from \"urql\";\nimport { cacheExchange, Resolver } from \"@urql/exchange-graphcache\";\nimport {\n  LogoutMutation,\n  MeQuery,\n  MeDocument,\n  LoginMutation,\n  RegisterMutation,\n} from \"../generated/graphql\";\nimport { pipe, tap } from \"wonka\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport Router from \"next/router\";\n\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes(\"not auth\")) {\n        Router.replace(\"/login\");\n      }\n    })\n  );\n};\n\nexport const cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    fieldInfos.forEach((fi) => {\n      cache.resolve(entityKey, fieldName);\n    });\n\n    //   const visited = new Set();\n    //   let result: NullArray<string> = [];\n    //   let prevOffset: number | null = null;\n\n    //   for (let i = 0; i < size; i++) {\n    //     const { fieldKey, arguments: args } = fieldInfos[i];\n    //     if (args === null || !compareArgs(fieldArgs, args)) {\n    //       continue;\n    //     }\n\n    //     const links = cache.resolve(entityKey, fieldKey) as string[];\n    //     const currentOffset = args[cursorArgument];\n\n    //     if (\n    //       links === null ||\n    //       links.length === 0 ||\n    //       typeof currentOffset !== \"number\"\n    //     ) {\n    //       continue;\n    //     }\n\n    //     const tempResult: NullArray<string> = [];\n\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n\n    //     if (\n    //       (!prevOffset || currentOffset > prevOffset) ===\n    //       (mergeMode === \"after\")\n    //     ) {\n    //       result = [...result, ...tempResult];\n    //     } else {\n    //       result = [...tempResult, ...result];\n    //     }\n\n    //     prevOffset = currentOffset;\n    //   }\n\n    //   const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    //   if (hasCurrentPage) {\n    //     return result;\n    //   } else if (!(info as any).store.schema) {\n    //     return undefined;\n    //   } else {\n    //     info.partial = true;\n    //     return result;\n    //   }\n  };\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      resolvers: {\n        Query: {\n          products: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}