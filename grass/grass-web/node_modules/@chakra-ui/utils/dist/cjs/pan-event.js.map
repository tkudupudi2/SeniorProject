{"version":3,"sources":["../../src/pan-event.ts"],"names":["PanSession","event","handlers","threshold","noop","lastEvent","lastEventInfo","info","getPanInfo","history","isPanStarted","startEvent","isDistancePastThreshold","offset","x","y","push","point","onStart","onMove","buttons","onPointerUp","sync","update","updatePoint","end","onEnd","panInfo","stopPropagation","preventDefault","onSessionStart","removeListeners","window","onPointerMove","updateHandlers","cancelSync","subtractPoint","a","b","startPanPoint","lastPanPoint","length","delta"],"mappings":"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","sourcesContent":["/**\n * This is a modified version of `PanSession` from `framer-motion`.\n *\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\nimport sync, { cancelSync } from \"framesync\"\nimport {\n  isMouseEvent,\n  extractEventInfo,\n  addPointerEvent,\n  AnyPointerEvent,\n  Point,\n  PointerEventInfo,\n  isMultiTouchEvent,\n} from \"./pointer-event\"\nimport { pipe, distance, noop } from \"./function\"\n\n/**\n * The event information passed to pan event handlers like `onPan`, `onPanStart`.\n *\n * It contains information about the current state of the tap gesture such as its\n * `point`, `delta`, and `offset`\n */\nexport interface PanEventInfo {\n  /**\n   * Contains `x` and `y` values for the current pan position relative\n   * to the device or page.\n   */\n  point: Point\n  /**\n   * Contains `x` and `y` values for the distance moved since\n   * the last pan event.\n   */\n  delta: Point\n  /**\n   * Contains `x` and `y` values for the distance moved from\n   * the first pan event.\n   */\n  offset: Point\n}\n\nexport type PanHandler = (event: AnyPointerEvent, info: PanEventInfo) => void\n\nexport interface PanSessionHandlers {\n  /**\n   * Callback fired when the pan session is created.\n   * This is typically called once `pointerdown` event is fired.\n   */\n  onSessionStart: PanHandler\n  /**\n   * Callback fired when the pan session has started.\n   * The pan session when the pan offset is greater than\n   * the threshold (allowable move distance to detect pan)\n   */\n  onStart: PanHandler\n  /**\n   * Callback fired while panning\n   */\n  onMove: PanHandler\n  /**\n   * Callback fired when the current pan session has end.\n   * This is typically called once `pointerup` event is fired.\n   */\n  onEnd: PanHandler\n}\n\n/**\n * @internal\n *\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\nexport class PanSession {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  private history: Point[] = []\n\n  // The pointer event that started the pan session\n  private startEvent: AnyPointerEvent | null = null\n\n  // The current pointer event for the pan session\n  private lastEvent: AnyPointerEvent | null = null\n\n  // The current pointer event info for the pan session\n  private lastEventInfo: PointerEventInfo | null = null\n\n  private handlers: Partial<PanSessionHandlers> = {}\n\n  private removeListeners: Function = noop\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  private threshold = 3\n\n  constructor(\n    event: AnyPointerEvent,\n    handlers: Partial<PanSessionHandlers>,\n    threshold?: number,\n  ) {\n    // If we have more than one touch, don't start detecting this gesture\n    if (isMultiTouchEvent(event)) return\n\n    this.handlers = handlers\n\n    if (threshold) {\n      this.threshold = threshold\n    }\n\n    // stop default browser behavior\n    event.stopPropagation()\n    event.preventDefault()\n\n    // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n    const info = extractEventInfo(event)\n    this.history = [info.point]\n\n    // notify pan session start\n    const { onSessionStart } = handlers\n    onSessionStart?.(event, getPanInfo(info, this.history))\n\n    // attach event listeners and return a single function to remove them all\n    this.removeListeners = pipe(\n      addPointerEvent(window, \"pointermove\", this.onPointerMove),\n      addPointerEvent(window, \"pointerup\", this.onPointerUp),\n      addPointerEvent(window, \"pointercancel\", this.onPointerUp),\n    )\n  }\n\n  private updatePoint = () => {\n    if (!(this.lastEvent && this.lastEventInfo)) return\n\n    const info = getPanInfo(this.lastEventInfo, this.history)\n\n    const isPanStarted = this.startEvent !== null\n\n    const isDistancePastThreshold =\n      distance(info.offset, { x: 0, y: 0 }) >= this.threshold\n\n    if (!isPanStarted && !isDistancePastThreshold) return\n\n    this.history.push(info.point)\n\n    const { onStart, onMove } = this.handlers\n\n    if (!isPanStarted) {\n      onStart?.(this.lastEvent, info)\n      this.startEvent = this.lastEvent\n    }\n\n    onMove?.(this.lastEvent, info)\n  }\n\n  private onPointerMove = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    this.lastEvent = event\n    this.lastEventInfo = info\n\n    // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n    if (isMouseEvent(event) && event.buttons === 0) {\n      this.onPointerUp(event, info)\n      return\n    }\n\n    // Throttle mouse move event to once per frame\n    sync.update(this.updatePoint, true)\n  }\n\n  private onPointerUp = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    this.end()\n\n    const { onEnd } = this.handlers\n    if (!onEnd || !this.startEvent) return\n\n    const panInfo = getPanInfo(info, this.history)\n    onEnd?.(event, panInfo)\n  }\n\n  updateHandlers(handlers: Partial<PanSessionHandlers>) {\n    this.handlers = handlers\n  }\n\n  end() {\n    this.removeListeners?.()\n    cancelSync.update(this.updatePoint)\n  }\n}\n\nfunction subtractPoint(a: Point, b: Point) {\n  return { x: a.x - b.x, y: a.y - b.y }\n}\n\nfunction startPanPoint(history: Point[]) {\n  return history[0]\n}\n\nfunction lastPanPoint(history: Point[]) {\n  return history[history.length - 1]\n}\n\nfunction getPanInfo(info: PointerEventInfo, history: Point[]) {\n  return {\n    point: info.point,\n    delta: subtractPoint(info.point, lastPanPoint(history)),\n    offset: subtractPoint(info.point, startPanPoint(history)),\n  }\n}\n"],"file":"pan-event.js"}