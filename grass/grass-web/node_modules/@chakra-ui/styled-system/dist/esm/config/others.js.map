{"version":3,"sources":["../../../src/config/others.ts"],"names":["memoizedGet","get","floatTransform","value","theme","map","left","right","direction","srOnly","border","clip","width","height","margin","padding","overflow","whiteSpace","position","srFocusable","getWithPriority","key","styles","result","obj","prop","isInStyles","others","animation","appearance","visibility","userSelect","pointerEvents","cursor","resize","objectFit","objectPosition","float","property","transform","willChange","filter","clipPath","layerStyle","processResult","textStyle","apply"],"mappings":"AAAA,SAASA,WAAW,IAAIC,GAAxB,QAAmC,kBAAnC;;AAMA,IAAMC,cAAyB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClD,MAAMC,GAAG,GAAG;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAAZ;AACA,SAAOH,KAAK,CAACI,SAAN,KAAoB,KAApB,GAA4BH,GAAG,CAACF,KAAD,CAA/B,GAAyCA,KAAhD;AACD,CAHD;;AAKA,IAAMM,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,KADK;AAEbC,EAAAA,IAAI,EAAE,kBAFO;AAGbC,EAAAA,KAAK,EAAE,KAHM;AAIbC,EAAAA,MAAM,EAAE,KAJK;AAKbC,EAAAA,MAAM,EAAE,MALK;AAMbC,EAAAA,OAAO,EAAE,KANI;AAObC,EAAAA,QAAQ,EAAE,QAPG;AAQbC,EAAAA,UAAU,EAAE,QARC;AASbC,EAAAA,QAAQ,EAAE;AATG,CAAf;AAYA,IAAMC,WAAW,GAAG;AAClBD,EAAAA,QAAQ,EAAE,QADQ;AAElBN,EAAAA,KAAK,EAAE,MAFW;AAGlBC,EAAAA,MAAM,EAAE,MAHU;AAIlBF,EAAAA,IAAI,EAAE,MAJY;AAKlBI,EAAAA,OAAO,EAAE,GALS;AAMlBD,EAAAA,MAAM,EAAE,GANU;AAOlBE,EAAAA,QAAQ,EAAE,SAPQ;AAQlBC,EAAAA,UAAU,EAAE;AARM,CAApB;;AAWA,IAAMG,eAAe,GAAG,CAAChB,KAAD,EAAaiB,GAAb,EAAuBC,MAAvB,KAAuC;AAC7D,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,GAAG,GAAGvB,GAAG,CAACG,KAAD,EAAQiB,GAAR,EAAa,EAAb,CAAf;;AACA,OAAK,IAAMI,IAAX,IAAmBD,GAAnB,EAAwB;AACtB,QAAME,UAAU,GAAGD,IAAI,IAAIH,MAAR,IAAkBA,MAAM,CAACG,IAAD,CAAN,IAAgB,IAArD;AACA,QAAI,CAACC,UAAL,EAAiBH,MAAM,CAACE,IAAD,CAAN,GAAeD,GAAG,CAACC,IAAD,CAAlB;AAClB;;AACD,SAAOF,MAAP;AACD,CARD;;AAUA,OAAO,IAAMI,MAAc,GAAG;AAC5BC,EAAAA,SAAS,EAAE,IADiB;AAE5BC,EAAAA,UAAU,EAAE,IAFgB;AAG5BC,EAAAA,UAAU,EAAE,IAHgB;AAI5BC,EAAAA,UAAU,EAAE,IAJgB;AAK5BC,EAAAA,aAAa,EAAE,IALa;AAM5BC,EAAAA,MAAM,EAAE,IANoB;AAO5BC,EAAAA,MAAM,EAAE,IAPoB;AAQ5BC,EAAAA,SAAS,EAAE,IARiB;AAS5BC,EAAAA,cAAc,EAAE,IATY;AAU5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,OADL;AAELC,IAAAA,SAAS,EAAErC;AAFN,GAVqB;AAc5BsC,EAAAA,UAAU,EAAE,IAdgB;AAe5BC,EAAAA,MAAM,EAAE,IAfoB;AAgB5BC,EAAAA,QAAQ,EAAE,IAhBkB;AAiB5BjC,EAAAA,MAAM,EAAE;AACN8B,IAAAA,SAAS,CAACpC,KAAD,EAAQ;AACf,UAAIA,KAAK,KAAK,IAAd,EAAoB,OAAOM,MAAP;AACpB,UAAIN,KAAK,KAAK,WAAd,EAA2B,OAAOgB,WAAP;AAC3B,aAAO,EAAP;AACD;;AALK,GAjBoB;AAwB5BwB,EAAAA,UAAU,EAAE;AACVC,IAAAA,aAAa,EAAE,IADL;AAEVL,IAAAA,SAAS,EAAE,CAACpC,KAAD,EAAQC,KAAR,EAAekB,MAAf,KACTF,eAAe,CAAChB,KAAD,mBAAuBD,KAAvB,EAAgCmB,MAAhC;AAHP,GAxBgB;AA6B5BuB,EAAAA,SAAS,EAAE;AACTD,IAAAA,aAAa,EAAE,IADN;AAETL,IAAAA,SAAS,EAAE,CAACpC,KAAD,EAAQC,KAAR,EAAekB,MAAf,KACTF,eAAe,CAAChB,KAAD,kBAAsBD,KAAtB,EAA+BmB,MAA/B;AAHR,GA7BiB;AAkC5BwB,EAAAA,KAAK,EAAE;AACLF,IAAAA,aAAa,EAAE,IADV;AAELL,IAAAA,SAAS,EAAE,CAACpC,KAAD,EAAQC,KAAR,EAAekB,MAAf,KAA0BF,eAAe,CAAChB,KAAD,EAAQD,KAAR,EAAemB,MAAf;AAF/C;AAlCqB,CAAvB","sourcesContent":["import { memoizedGet as get } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { Config } from \"../prop-config\"\nimport { Transform } from \"../types\"\nimport { Length, ResponsiveValue, Token } from \"../utils\"\n\nconst floatTransform: Transform = (value, theme) => {\n  const map = { left: \"right\", right: \"left\" }\n  return theme.direction === \"rtl\" ? map[value] : value\n}\n\nconst srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n\nconst srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\",\n}\n\nconst getWithPriority = (theme: any, key: any, styles: any) => {\n  const result = {}\n  const obj = get(theme, key, {})\n  for (const prop in obj) {\n    const isInStyles = prop in styles && styles[prop] != null\n    if (!isInStyles) result[prop] = obj[prop]\n  }\n  return result\n}\n\nexport const others: Config = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform,\n  },\n  willChange: true,\n  filter: true,\n  clipPath: true,\n  srOnly: {\n    transform(value) {\n      if (value === true) return srOnly\n      if (value === \"focusable\") return srFocusable\n      return {}\n    },\n  },\n  layerStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `layerStyles.${value}`, styles),\n  },\n  textStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `textStyles.${value}`, styles),\n  },\n  apply: {\n    processResult: true,\n    transform: (value, theme, styles) => getWithPriority(theme, value, styles),\n  },\n}\n\nexport interface OtherProps {\n  /**\n   * The CSS `animation` property\n   */\n  animation?: ResponsiveValue<CSS.Property.Animation>\n  /**\n   * The CSS `appearance` property\n   */\n  appearance?: ResponsiveValue<CSS.Property.Appearance>\n  /**\n   * The CSS `visibility` property\n   */\n  visibility?: ResponsiveValue<CSS.Property.Visibility>\n  /**\n   * The CSS `user-select` property\n   */\n  userSelect?: ResponsiveValue<CSS.Property.UserSelect>\n  /**\n   * The CSS `pointer-events` property\n   */\n  pointerEvents?: ResponsiveValue<CSS.Property.PointerEvents>\n  /**\n   * The CSS `cursor` property\n   */\n  cursor?: ResponsiveValue<CSS.Property.Cursor>\n  /**\n   * The CSS `resize` property\n   */\n  resize?: ResponsiveValue<CSS.Property.Resize>\n  /**\n   * The CSS `object-fit` property\n   */\n  objectFit?: ResponsiveValue<CSS.Property.ObjectFit>\n  /**\n   * The CSS `object-position` property\n   */\n  objectPosition?: ResponsiveValue<CSS.Property.ObjectPosition<Length>>\n  /**\n   * The CSS `float` property\n   */\n  float?: ResponsiveValue<CSS.Property.Float>\n  /**\n   * The CSS `will-change` property\n   */\n  willChange?: ResponsiveValue<CSS.Property.WillChange>\n  /**\n   * The CSS `filter` property\n   */\n  filter?: ResponsiveValue<CSS.Property.Filter>\n  /**\n   * If `true`, hide an element visually without hiding it from screen readers.\n   *\n   * If `focusable`, the sr-only styles will be undone, making the element visible\n   * to sighted users as well as screen readers.\n   */\n  srOnly?: true | \"focusable\"\n  /**\n   * The CSS `clip-path` property.\n   *\n   * It creates a clipping region that sets what part of an element should be shown.\n   */\n  clipPath?: ResponsiveValue<CSS.Property.ClipPath>\n  /**\n   * The layer style object to apply.\n   * Note: Styles must be located in `theme.layerStyles`\n   */\n  layerStyle?: Token<string & {}, \"layerStyles\">\n  /**\n   * The text style object to apply.\n   * Note: Styles must be located in `theme.textStyles`\n   */\n  textStyle?: Token<string & {}, \"textStyles\">\n  /**\n   * Apply theme-aware style objects in `theme`\n   */\n  apply?: ResponsiveValue<string>\n}\n"],"file":"others.js"}