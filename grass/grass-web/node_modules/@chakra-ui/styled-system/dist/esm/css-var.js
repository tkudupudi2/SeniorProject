function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { isCssVar, isObject, pick, analyzeBreakpoints } from "@chakra-ui/utils";

var replaceWhiteSpace = function replaceWhiteSpace(value, replaceValue) {
  if (replaceValue === void 0) {
    replaceValue = "-";
  }

  return value.replace(/\s+/g, replaceValue);
};

var escape = value => {
  var valueStr = replaceWhiteSpace(value.toString());
  if (valueStr.includes("\\.")) return value;
  var isDecimal = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal ? valueStr.replace(".", "\\.") : value;
};

export var toVarDefinition = function toVarDefinition(value, prefix) {
  if (prefix === void 0) {
    prefix = "";
  }

  return "--" + [prefix, escape(value)].filter(Boolean).join("-");
};
export var toVarReference = value => "var(" + escape(value) + ")";
export var toNegativeVar = value => "calc(" + escape(value) + " * -1)";
export var tokens = ["colors", "borders", "borderWidths", "borderStyles", "fonts", "fontSizes", "fontWeights", "letterSpacings", "lineHeights", "radii", "space", "shadows", "sizes", "zIndices", "transition"];

function extractTokens(theme) {
  var _tokens = tokens;
  return pick(theme, _tokens);
}

function omitVars(rawTheme) {
  var cleanTheme = _objectWithoutPropertiesLoose(rawTheme, ["__cssMap", "__cssVars", "__breakpoints"]);

  return cleanTheme;
}
/**
 * The CSS transform order following the upcoming spec from CSSWG
 * translate => rotate => scale => skew
 * @see https://drafts.csswg.org/css-transforms-2/#ctm
 * @see https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/
 */


var transformTemplate = ["rotate(var(--chakra-rotate, 0))", "scaleX(var(--chakra-scale-x, 1))", "scaleY(var(--chakra-scale-y, 1))", "skewX(var(--chakra-skew-x, 0))", "skewY(var(--chakra-skew-y, 0))"];
export function getTransformTemplate() {
  return ["translateX(var(--chakra-translate-x, 0))", "translateY(var(--chakra-translate-y, 0))", ...transformTemplate].join(" ");
}
export function getTransformGpuTemplate() {
  return ["translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)", ...transformTemplate].join(" ");
}
export function toCSSVar(rawTheme) {
  var _theme$config;

  /**
   * In the case the theme has already been converted to css-var (e.g extending the theme),
   * we can omit the computed css vars and recompute it for the extended theme.
   */
  var theme = omitVars(rawTheme); // omit components and breakpoints from css variable map

  var tokens = extractTokens(theme);
  var cssVarPrefix = (_theme$config = theme.config) == null ? void 0 : _theme$config.cssVarPrefix;
  var {
    /**
     * This is more like a dictionary of tokens users will type `green.500`,
     * and their equivalent css variable.
     */
    cssMap,

    /**
     * The extracted css variables will be stored here, and used in
     * the emotion's <Global/> component to attach variables to `:root`
     */
    cssVars
  } = toProperties(tokens, {
    cssVarPrefix
  });
  var defaultCssVars = {
    "--chakra-ring-offset": "0px",
    "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
    "--chakra-ring-width": "3px",
    "--chakra-ring-inset": "var(--chakra-empty, /*!*/ /*!*/)",
    "--chakra-ring-offset-shadow": "var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset) var(--chakra-ring-offset-color, transparent)",
    "--chakra-ring-shadow": "var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset)) var(--chakra-ring-color)",
    "--chakra-ring": "var(--chakra-ring-offset-shadow), var(--chakra-ring-shadow), 0 0 transparent",
    "--chakra-transform-gpu": getTransformGpuTemplate(),
    "--chakra-transform": getTransformTemplate(),
    "--chakra-space-x-reverse": "0",
    "--chakra-space-y-reverse": "0"
  };
  Object.assign(theme, {
    __cssVars: _extends({}, defaultCssVars, cssVars),
    __cssMap: cssMap,
    __breakpoints: analyzeBreakpoints(theme.breakpoints)
  });
  return theme;
}

function toProperties(target, options, initialContext, prefixes) {
  if (prefixes === void 0) {
    prefixes = [];
  }

  var context = {
    cssMap: _extends({}, initialContext == null ? void 0 : initialContext.cssMap),
    cssVars: _extends({}, initialContext == null ? void 0 : initialContext.cssVars)
  };
  return Object.entries(target).reduce((properties, _ref) => {
    var [key, value] = _ref;

    if (isObject(value) || Array.isArray(value)) {
      var nested = toProperties(value, options, properties, prefixes.concat(key));
      Object.assign(properties.cssVars, nested.cssVars);
      Object.assign(properties.cssMap, nested.cssMap);
    } else {
      var _tokenHandlerMap$firs;

      var finalKey = prefixes.concat(key); // firstKey will be e.g. "space"

      var [firstKey] = finalKey;
      var handler = (_tokenHandlerMap$firs = tokenHandlerMap[firstKey]) != null ? _tokenHandlerMap$firs : tokenHandlerMap.defaultHandler;
      var {
        cssVars,
        cssMap
      } = handler(finalKey, value, options);
      Object.assign(properties.cssVars, cssVars);
      Object.assign(properties.cssMap, cssMap);
    }

    return properties;
  }, context);
}
/**
 * Define transformation handlers for ThemeScale
 */


var tokenHandlerMap = {
  space: (keys, value, options) => {
    var properties = tokenHandlerMap.defaultHandler(keys, value, options);
    var [firstKey, ...referenceKeys] = keys;
    var negativeLookupKey = firstKey + ".-" + referenceKeys.join(".");
    var negativeVarKey = keys.join("-");
    var cssVar = toVarDefinition(negativeVarKey, options.cssVarPrefix);
    var negativeValue = isCssVar(String(value)) ? toNegativeVar(String(value)) : "-" + value;
    var varRef = toNegativeVar(toVarReference(cssVar));
    return {
      cssVars: properties.cssVars,
      cssMap: _extends({}, properties.cssMap, {
        [negativeLookupKey]: {
          value: negativeValue,
          var: cssVar,
          varRef
        }
      })
    };
  },
  defaultHandler: (keys, value, options) => {
    var lookupKey = keys.join(".");
    var varKey = keys.join("-");
    var cssVar = toVarDefinition(varKey, options.cssVarPrefix);
    return {
      cssVars: {
        [cssVar]: value
      },
      cssMap: {
        [lookupKey]: {
          value,
          var: cssVar,
          varRef: toVarReference(cssVar)
        }
      }
    };
  }
};
//# sourceMappingURL=css-var.js.map