import * as CSS from "csstype";
import { Config } from "../prop-config";
import { Length, ResponsiveValue, Token } from "../utils";
export declare const others: Config;
export interface OtherProps {
    /**
     * The CSS `animation` property
     */
    animation?: ResponsiveValue<CSS.Property.Animation>;
    /**
     * The CSS `appearance` property
     */
    appearance?: ResponsiveValue<CSS.Property.Appearance>;
    /**
     * The CSS `visibility` property
     */
    visibility?: ResponsiveValue<CSS.Property.Visibility>;
    /**
     * The CSS `user-select` property
     */
    userSelect?: ResponsiveValue<CSS.Property.UserSelect>;
    /**
     * The CSS `pointer-events` property
     */
    pointerEvents?: ResponsiveValue<CSS.Property.PointerEvents>;
    /**
     * The CSS `cursor` property
     */
    cursor?: ResponsiveValue<CSS.Property.Cursor>;
    /**
     * The CSS `resize` property
     */
    resize?: ResponsiveValue<CSS.Property.Resize>;
    /**
     * The CSS `object-fit` property
     */
    objectFit?: ResponsiveValue<CSS.Property.ObjectFit>;
    /**
     * The CSS `object-position` property
     */
    objectPosition?: ResponsiveValue<CSS.Property.ObjectPosition<Length>>;
    /**
     * The CSS `float` property
     */
    float?: ResponsiveValue<CSS.Property.Float>;
    /**
     * The CSS `will-change` property
     */
    willChange?: ResponsiveValue<CSS.Property.WillChange>;
    /**
     * The CSS `filter` property
     */
    filter?: ResponsiveValue<CSS.Property.Filter>;
    /**
     * If `true`, hide an element visually without hiding it from screen readers.
     *
     * If `focusable`, the sr-only styles will be undone, making the element visible
     * to sighted users as well as screen readers.
     */
    srOnly?: true | "focusable";
    /**
     * The CSS `clip-path` property.
     *
     * It creates a clipping region that sets what part of an element should be shown.
     */
    clipPath?: ResponsiveValue<CSS.Property.ClipPath>;
    /**
     * The layer style object to apply.
     * Note: Styles must be located in `theme.layerStyles`
     */
    layerStyle?: Token<string & {}, "layerStyles">;
    /**
     * The text style object to apply.
     * Note: Styles must be located in `theme.textStyles`
     */
    textStyle?: Token<string & {}, "textStyles">;
    /**
     * Apply theme-aware style objects in `theme`
     */
    apply?: ResponsiveValue<string>;
}
//# sourceMappingURL=others.d.ts.map