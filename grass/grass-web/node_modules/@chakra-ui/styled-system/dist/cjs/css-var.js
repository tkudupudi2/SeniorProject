"use strict";

exports.__esModule = true;
exports.getTransformTemplate = getTransformTemplate;
exports.getTransformGpuTemplate = getTransformGpuTemplate;
exports.toCSSVar = toCSSVar;
exports.tokens = exports.toNegativeVar = exports.toVarReference = exports.toVarDefinition = void 0;

var _utils = require("@chakra-ui/utils");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var replaceWhiteSpace = function replaceWhiteSpace(value, replaceValue) {
  if (replaceValue === void 0) {
    replaceValue = "-";
  }

  return value.replace(/\s+/g, replaceValue);
};

var escape = function escape(value) {
  var valueStr = replaceWhiteSpace(value.toString());
  if (valueStr.includes("\\.")) return value;
  var isDecimal = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal ? valueStr.replace(".", "\\.") : value;
};

var toVarDefinition = function toVarDefinition(value, prefix) {
  if (prefix === void 0) {
    prefix = "";
  }

  return "--" + [prefix, escape(value)].filter(Boolean).join("-");
};

exports.toVarDefinition = toVarDefinition;

var toVarReference = function toVarReference(value) {
  return "var(" + escape(value) + ")";
};

exports.toVarReference = toVarReference;

var toNegativeVar = function toNegativeVar(value) {
  return "calc(" + escape(value) + " * -1)";
};

exports.toNegativeVar = toNegativeVar;
var tokens = ["colors", "borders", "borderWidths", "borderStyles", "fonts", "fontSizes", "fontWeights", "letterSpacings", "lineHeights", "radii", "space", "shadows", "sizes", "zIndices", "transition"];
exports.tokens = tokens;

function extractTokens(theme) {
  var _tokens = tokens;
  return (0, _utils.pick)(theme, _tokens);
}

function omitVars(rawTheme) {
  var __cssMap = rawTheme.__cssMap,
      __cssVars = rawTheme.__cssVars,
      __breakpoints = rawTheme.__breakpoints,
      cleanTheme = _objectWithoutPropertiesLoose(rawTheme, ["__cssMap", "__cssVars", "__breakpoints"]);

  return cleanTheme;
}
/**
 * The CSS transform order following the upcoming spec from CSSWG
 * translate => rotate => scale => skew
 * @see https://drafts.csswg.org/css-transforms-2/#ctm
 * @see https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/
 */


var transformTemplate = ["rotate(var(--chakra-rotate, 0))", "scaleX(var(--chakra-scale-x, 1))", "scaleY(var(--chakra-scale-y, 1))", "skewX(var(--chakra-skew-x, 0))", "skewY(var(--chakra-skew-y, 0))"];

function getTransformTemplate() {
  return ["translateX(var(--chakra-translate-x, 0))", "translateY(var(--chakra-translate-y, 0))"].concat(transformTemplate).join(" ");
}

function getTransformGpuTemplate() {
  return ["translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)"].concat(transformTemplate).join(" ");
}

function toCSSVar(rawTheme) {
  var _theme$config;

  /**
   * In the case the theme has already been converted to css-var (e.g extending the theme),
   * we can omit the computed css vars and recompute it for the extended theme.
   */
  var theme = omitVars(rawTheme); // omit components and breakpoints from css variable map

  var tokens = extractTokens(theme);
  var cssVarPrefix = (_theme$config = theme.config) == null ? void 0 : _theme$config.cssVarPrefix;

  var _toProperties = toProperties(tokens, {
    cssVarPrefix: cssVarPrefix
  }),
      cssMap = _toProperties.cssMap,
      cssVars = _toProperties.cssVars;

  var defaultCssVars = {
    "--chakra-ring-offset": "0px",
    "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
    "--chakra-ring-width": "3px",
    "--chakra-ring-inset": "var(--chakra-empty, /*!*/ /*!*/)",
    "--chakra-ring-offset-shadow": "var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset) var(--chakra-ring-offset-color, transparent)",
    "--chakra-ring-shadow": "var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset)) var(--chakra-ring-color)",
    "--chakra-ring": "var(--chakra-ring-offset-shadow), var(--chakra-ring-shadow), 0 0 transparent",
    "--chakra-transform-gpu": getTransformGpuTemplate(),
    "--chakra-transform": getTransformTemplate(),
    "--chakra-space-x-reverse": "0",
    "--chakra-space-y-reverse": "0"
  };
  Object.assign(theme, {
    __cssVars: _extends({}, defaultCssVars, cssVars),
    __cssMap: cssMap,
    __breakpoints: (0, _utils.analyzeBreakpoints)(theme.breakpoints)
  });
  return theme;
}

function toProperties(target, options, initialContext, prefixes) {
  if (prefixes === void 0) {
    prefixes = [];
  }

  var context = {
    cssMap: _extends({}, initialContext == null ? void 0 : initialContext.cssMap),
    cssVars: _extends({}, initialContext == null ? void 0 : initialContext.cssVars)
  };
  return Object.entries(target).reduce(function (properties, _ref) {
    var key = _ref[0],
        value = _ref[1];

    if ((0, _utils.isObject)(value) || Array.isArray(value)) {
      var nested = toProperties(value, options, properties, prefixes.concat(key));
      Object.assign(properties.cssVars, nested.cssVars);
      Object.assign(properties.cssMap, nested.cssMap);
    } else {
      var _tokenHandlerMap$firs;

      var finalKey = prefixes.concat(key); // firstKey will be e.g. "space"

      var firstKey = finalKey[0];
      var handler = (_tokenHandlerMap$firs = tokenHandlerMap[firstKey]) != null ? _tokenHandlerMap$firs : tokenHandlerMap.defaultHandler;

      var _handler = handler(finalKey, value, options),
          cssVars = _handler.cssVars,
          cssMap = _handler.cssMap;

      Object.assign(properties.cssVars, cssVars);
      Object.assign(properties.cssMap, cssMap);
    }

    return properties;
  }, context);
}
/**
 * Define transformation handlers for ThemeScale
 */


var tokenHandlerMap = {
  space: function space(keys, value, options) {
    var _extends2;

    var properties = tokenHandlerMap.defaultHandler(keys, value, options);
    var firstKey = keys[0],
        referenceKeys = keys.slice(1);
    var negativeLookupKey = firstKey + ".-" + referenceKeys.join(".");
    var negativeVarKey = keys.join("-");
    var cssVar = toVarDefinition(negativeVarKey, options.cssVarPrefix);
    var negativeValue = (0, _utils.isCssVar)(String(value)) ? toNegativeVar(String(value)) : "-" + value;
    var varRef = toNegativeVar(toVarReference(cssVar));
    return {
      cssVars: properties.cssVars,
      cssMap: _extends({}, properties.cssMap, (_extends2 = {}, _extends2[negativeLookupKey] = {
        value: negativeValue,
        "var": cssVar,
        varRef: varRef
      }, _extends2))
    };
  },
  defaultHandler: function defaultHandler(keys, value, options) {
    var _cssVars, _cssMap;

    var lookupKey = keys.join(".");
    var varKey = keys.join("-");
    var cssVar = toVarDefinition(varKey, options.cssVarPrefix);
    return {
      cssVars: (_cssVars = {}, _cssVars[cssVar] = value, _cssVars),
      cssMap: (_cssMap = {}, _cssMap[lookupKey] = {
        value: value,
        "var": cssVar,
        varRef: toVarReference(cssVar)
      }, _cssMap)
    };
  }
};
//# sourceMappingURL=css-var.js.map