{"version":3,"sources":["../../src/css-var.ts"],"names":["replaceWhiteSpace","value","replaceValue","replace","escape","valueStr","toString","includes","isDecimal","Number","isInteger","parseFloat","toVarDefinition","prefix","filter","Boolean","join","toVarReference","toNegativeVar","tokens","extractTokens","theme","_tokens","omitVars","rawTheme","__cssMap","__cssVars","__breakpoints","cleanTheme","transformTemplate","getTransformTemplate","getTransformGpuTemplate","toCSSVar","cssVarPrefix","config","toProperties","cssMap","cssVars","defaultCssVars","Object","assign","breakpoints","target","options","initialContext","prefixes","context","entries","reduce","properties","key","Array","isArray","nested","concat","finalKey","firstKey","handler","tokenHandlerMap","defaultHandler","space","keys","referenceKeys","negativeLookupKey","negativeVarKey","cssVar","negativeValue","String","varRef","lookupKey","varKey"],"mappings":"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","sourcesContent":["import {\n  Dict,\n  isCssVar,\n  isObject,\n  pick,\n  analyzeBreakpoints,\n} from \"@chakra-ui/utils\"\nimport type { WithCSSVar } from \"./types\"\n\nconst replaceWhiteSpace = (value: string, replaceValue = \"-\") =>\n  value.replace(/\\s+/g, replaceValue)\n\nconst escape = (value: string | number) => {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  const isDecimal = !Number.isInteger(parseFloat(value.toString()))\n  return isDecimal ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport const toVarDefinition = (value: string, prefix = \"\") =>\n  `--${[prefix, escape(value)].filter(Boolean).join(\"-\")}`\nexport const toVarReference = (value: string) => `var(${escape(value)})`\nexport const toNegativeVar = (value: string) => `calc(${escape(value)} * -1)`\n\nexport const tokens = [\n  \"colors\",\n  \"borders\",\n  \"borderWidths\",\n  \"borderStyles\",\n  \"fonts\",\n  \"fontSizes\",\n  \"fontWeights\",\n  \"letterSpacings\",\n  \"lineHeights\",\n  \"radii\",\n  \"space\",\n  \"shadows\",\n  \"sizes\",\n  \"zIndices\",\n  \"transition\",\n] as const\n\nexport type ThemeScale =\n  | typeof tokens[number]\n  | \"transition.duration\"\n  | \"transition.property\"\n  | \"transition.easing\"\n\nfunction extractTokens(theme: Dict) {\n  const _tokens = (tokens as unknown) as string[]\n  return pick(theme, _tokens)\n}\n\nfunction omitVars(rawTheme: Dict) {\n  const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme\n  return cleanTheme\n}\n\n/**\n * The CSS transform order following the upcoming spec from CSSWG\n * translate => rotate => scale => skew\n * @see https://drafts.csswg.org/css-transforms-2/#ctm\n * @see https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/\n */\nconst transformTemplate = [\n  \"rotate(var(--chakra-rotate, 0))\",\n  \"scaleX(var(--chakra-scale-x, 1))\",\n  \"scaleY(var(--chakra-scale-y, 1))\",\n  \"skewX(var(--chakra-skew-x, 0))\",\n  \"skewY(var(--chakra-skew-y, 0))\",\n]\n\nexport function getTransformTemplate() {\n  return [\n    \"translateX(var(--chakra-translate-x, 0))\",\n    \"translateY(var(--chakra-translate-y, 0))\",\n    ...transformTemplate,\n  ].join(\" \")\n}\n\nexport function getTransformGpuTemplate() {\n  return [\n    \"translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)\",\n    ...transformTemplate,\n  ].join(\" \")\n}\n\nexport function toCSSVar<T extends Dict>(rawTheme: T) {\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n  const theme = omitVars(rawTheme)\n\n  // omit components and breakpoints from css variable map\n  const tokens = extractTokens(theme)\n\n  const cssVarPrefix = theme.config?.cssVarPrefix\n\n  const {\n    /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */\n    cssMap,\n    /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */\n    cssVars,\n  } = toProperties(tokens, { cssVarPrefix })\n\n  const defaultCssVars: Dict = {\n    \"--chakra-ring-offset\": \"0px\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-width\": \"3px\",\n    \"--chakra-ring-inset\": \"var(--chakra-empty, /*!*/ /*!*/)\",\n    \"--chakra-ring-offset-shadow\":\n      \"var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset) var(--chakra-ring-offset-color, transparent)\",\n    \"--chakra-ring-shadow\":\n      \"var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset)) var(--chakra-ring-color)\",\n    \"--chakra-ring\":\n      \"var(--chakra-ring-offset-shadow), var(--chakra-ring-shadow), 0 0 transparent\",\n    \"--chakra-transform-gpu\": getTransformGpuTemplate(),\n    \"--chakra-transform\": getTransformTemplate(),\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\",\n  }\n\n  Object.assign(theme, {\n    __cssVars: { ...defaultCssVars, ...cssVars },\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints),\n  })\n\n  return theme as WithCSSVar<T>\n}\n\ntype ToPropertiesOptions = { cssVarPrefix?: string }\n\nfunction toProperties(\n  target: Dict,\n  options: ToPropertiesOptions,\n  initialContext?: { cssMap?: Dict; cssVars?: Dict },\n  prefixes: string[] = [],\n) {\n  const context = {\n    cssMap: {\n      ...initialContext?.cssMap,\n    },\n    cssVars: {\n      ...initialContext?.cssVars,\n    },\n  }\n\n  return Object.entries(target).reduce((properties, [key, value]) => {\n    if (isObject(value) || Array.isArray(value)) {\n      const nested = toProperties(\n        value,\n        options,\n        properties,\n        prefixes.concat(key),\n      )\n      Object.assign(properties.cssVars, nested.cssVars)\n      Object.assign(properties.cssMap, nested.cssMap)\n    } else {\n      const finalKey = prefixes.concat(key)\n      // firstKey will be e.g. \"space\"\n      const [firstKey] = finalKey\n\n      const handler =\n        tokenHandlerMap[firstKey] ?? tokenHandlerMap.defaultHandler\n\n      const { cssVars, cssMap } = handler(finalKey, value, options)\n      Object.assign(properties.cssVars, cssVars)\n      Object.assign(properties.cssMap, cssMap)\n    }\n\n    return properties\n  }, context)\n}\n\n/**\n * Define transformation handlers for ThemeScale\n */\nconst tokenHandlerMap: Partial<\n  Record<\n    ThemeScale | \"defaultHandler\",\n    (\n      keys: string[],\n      value: unknown,\n      options: ToPropertiesOptions,\n    ) => { cssVars: Dict; cssMap: Dict }\n  >\n> = {\n  space: (keys, value, options) => {\n    const properties = tokenHandlerMap.defaultHandler!(keys, value, options)\n    const [firstKey, ...referenceKeys] = keys\n\n    const negativeLookupKey = `${firstKey}.-${referenceKeys.join(\".\")}`\n    const negativeVarKey = keys.join(\"-\")\n    const cssVar = toVarDefinition(negativeVarKey, options.cssVarPrefix)\n    const negativeValue = isCssVar(String(value))\n      ? toNegativeVar(String(value))\n      : `-${value}`\n\n    const varRef = toNegativeVar(toVarReference(cssVar))\n\n    return {\n      cssVars: properties.cssVars,\n      cssMap: {\n        ...properties.cssMap,\n        [negativeLookupKey]: {\n          value: negativeValue,\n          var: cssVar,\n          varRef,\n        },\n      },\n    }\n  },\n  defaultHandler: (keys, value, options) => {\n    const lookupKey = keys.join(\".\")\n    const varKey = keys.join(\"-\")\n\n    const cssVar = toVarDefinition(varKey, options.cssVarPrefix)\n\n    return {\n      cssVars: {\n        [cssVar]: value,\n      },\n      cssMap: {\n        [lookupKey]: {\n          value,\n          var: cssVar,\n          varRef: toVarReference(cssVar),\n        },\n      },\n    }\n  },\n}\n"],"file":"css-var.js"}