{"version":3,"sources":["../../src/create-transform.ts"],"names":["analyzeCSSValue","value","num","parseFloat","toString","unit","replace","String","unitless","px","tokenToCSSVar","scale","theme","valueStr","key","__cssMap","varRef","createTransform","options","transform","compose","fn","_value","result"],"mappings":";;;;;;AAAA;;AAIA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAA4B;AAClD,MAAMC,GAAG,GAAGC,UAAU,CAACF,KAAK,CAACG,QAAN,EAAD,CAAtB;AACA,MAAMC,IAAI,GAAGJ,KAAK,CAACG,QAAN,GAAiBE,OAAjB,CAAyBC,MAAM,CAACL,GAAD,CAA/B,EAAsC,EAAtC,CAAb;AACA,SAAO;AAAEM,IAAAA,QAAQ,EAAE,CAACH,IAAb;AAAmBJ,IAAAA,KAAK,EAAEC,GAA1B;AAA+BG,IAAAA,IAAI,EAAJA;AAA/B,GAAP;AACD,CAJD;;AAMO,IAAMI,EAAE,GAAG,SAALA,EAAK,CAACR,KAAD,EAAoC;AACpD,MAAIA,KAAK,IAAI,IAAb,EAAmB,OAAOA,KAAP;;AADiC,yBAE/BD,eAAe,CAACC,KAAD,CAFgB;AAAA,MAE5CO,QAF4C,oBAE5CA,QAF4C;;AAGpD,SAAOA,QAAQ,IAAI,qBAASP,KAAT,CAAZ,GAAiCA,KAAjC,UAA6CA,KAApD;AACD,CAJM;;;;AAYA,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAoBV,KAApB;AAAA,SAAmC,UAC9DW,KAD8D,EAE3D;AACH,QAAMC,QAAQ,GAAGN,MAAM,CAACN,KAAD,CAAvB;AACA,QAAMa,GAAG,GAAGH,KAAK,GAAMA,KAAN,SAAeE,QAAf,GAA4BA,QAA7C;AACA,WAAO,qBAASD,KAAK,CAACG,QAAf,KAA4BD,GAAG,IAAIF,KAAK,CAACG,QAAzC,GACHH,KAAK,CAACG,QAAN,CAAeD,GAAf,EAAoBE,MADjB,GAEHf,KAFJ;AAGD,GAR4B;AAAA,CAAtB;;;;AAUA,SAASgB,eAAT,CAAyBC,OAAzB,EAA0D;AAAA,MACvDP,KADuD,GACzBO,OADyB,CACvDP,KADuD;AAAA,MAChDQ,SADgD,GACzBD,OADyB,CAChDC,SADgD;AAAA,MACrCC,OADqC,GACzBF,OADyB,CACrCE,OADqC;;AAG/D,MAAMC,EAAa,GAAG,SAAhBA,EAAgB,CAACpB,KAAD,EAAQW,KAAR,EAAkB;AAAA;;AACtC,QAAMU,MAAM,GAAGZ,aAAa,CAACC,KAAD,EAAQV,KAAR,CAAb,CAA4BW,KAA5B,CAAf;;AACA,QAAIW,MAAM,iBAAGJ,SAAH,oBAAGA,SAAS,CAAGG,MAAH,EAAWV,KAAX,CAAZ,yBAAiCU,MAA3C;;AACA,QAAIF,OAAJ,EAAa;AACXG,MAAAA,MAAM,GAAGH,OAAO,CAACG,MAAD,EAASX,KAAT,CAAhB;AACD;;AACD,WAAOW,MAAP;AACD,GAPD;;AASA,SAAOF,EAAP;AACD","sourcesContent":["import { Dict, isNumber, isObject } from \"@chakra-ui/utils\"\nimport type { ThemeScale } from \"./css-var\"\nimport type { Transform } from \"./types\"\n\nconst analyzeCSSValue = (value: number | string) => {\n  const num = parseFloat(value.toString())\n  const unit = value.toString().replace(String(num), \"\")\n  return { unitless: !unit, value: num, unit }\n}\n\nexport const px = (value: number | string): string => {\n  if (value == null) return value\n  const { unitless } = analyzeCSSValue(value)\n  return unitless || isNumber(value) ? `${value}px` : value\n}\n\ninterface CreateTransformOptions {\n  scale: ThemeScale\n  compose?: Transform\n  transform?: Transform\n}\n\nexport const tokenToCSSVar = (scale: ThemeScale, value: any) => (\n  theme: Dict,\n) => {\n  const valueStr = String(value)\n  const key = scale ? `${scale}.${valueStr}` : valueStr\n  return isObject(theme.__cssMap) && key in theme.__cssMap\n    ? theme.__cssMap[key].varRef\n    : value\n}\n\nexport function createTransform(options: CreateTransformOptions) {\n  const { scale, transform, compose } = options\n\n  const fn: Transform = (value, theme) => {\n    const _value = tokenToCSSVar(scale, value)(theme)\n    let result = transform?.(_value, theme) ?? _value\n    if (compose) {\n      result = compose(result, theme)\n    }\n    return result\n  }\n\n  return fn\n}\n"],"file":"create-transform.js"}