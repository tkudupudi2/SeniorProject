{"version":3,"sources":["../../../src/config/typography.ts"],"names":["typography","fontFamily","t","prop","fontSize","px","fontWeight","lineHeight","letterSpacing","textAlign","fontStyle","wordBreak","overflowWrap","textOverflow","textTransform","whiteSpace","textDecoration","textDecor","property","noOfLines","overflow","display","WebkitBoxOrient","WebkitLineClamp","isTruncated","transform","value"],"mappings":";;;;;AACA;;AAEA;;AAEO,IAAMA,UAAkB,GAAG;AAChCC,EAAAA,UAAU,EAAEC,SAAEC,IAAF,CAAO,YAAP,EAAqB,OAArB,CADoB;AAEhCC,EAAAA,QAAQ,EAAEF,SAAEC,IAAF,CAAO,UAAP,EAAmB,WAAnB,EAAgCE,mBAAhC,CAFsB;AAGhCC,EAAAA,UAAU,EAAEJ,SAAEC,IAAF,CAAO,YAAP,EAAqB,aAArB,CAHoB;AAIhCI,EAAAA,UAAU,EAAEL,SAAEC,IAAF,CAAO,YAAP,EAAqB,aAArB,CAJoB;AAKhCK,EAAAA,aAAa,EAAEN,SAAEC,IAAF,CAAO,eAAP,EAAwB,gBAAxB,CALiB;AAMhCM,EAAAA,SAAS,EAAE,IANqB;AAOhCC,EAAAA,SAAS,EAAE,IAPqB;AAQhCC,EAAAA,SAAS,EAAE,IARqB;AAShCC,EAAAA,YAAY,EAAE,IATkB;AAUhCC,EAAAA,YAAY,EAAE,IAVkB;AAWhCC,EAAAA,aAAa,EAAE,IAXiB;AAYhCC,EAAAA,UAAU,EAAE,IAZoB;AAahCC,EAAAA,cAAc,EAAE,IAbgB;AAchCC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAdqB;AAehCC,EAAAA,SAAS,EAAE;AACT,cAAQ;AACNC,MAAAA,QAAQ,EAAE,QADJ;AAENP,MAAAA,YAAY,EAAE,UAFR;AAGNQ,MAAAA,OAAO,EAAE,aAHH;AAINC,MAAAA,eAAe,EAAE,UAJX;AAKN;AACAC,MAAAA,eAAe,EAAE;AANX,KADC;AASTL,IAAAA,QAAQ,EAAE;AATD,GAfqB;AA0BhCM,EAAAA,WAAW,EAAE;AACXC,IAAAA,SADW,qBACDC,KADC,EACM;AACf,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAO;AACLN,UAAAA,QAAQ,EAAE,QADL;AAELP,UAAAA,YAAY,EAAE,UAFT;AAGLE,UAAAA,UAAU,EAAE;AAHP,SAAP;AAKD;AACF;AATU;AA1BmB,CAA3B;AAuCP;AACA;AACA","sourcesContent":["import * as CSS from \"csstype\"\nimport { px } from \"../create-transform\"\nimport { Config } from \"../prop-config\"\nimport { ResponsiveValue, t, Token } from \"../utils\"\n\nexport const typography: Config = {\n  fontFamily: t.prop(\"fontFamily\", \"fonts\"),\n  fontSize: t.prop(\"fontSize\", \"fontSizes\", px),\n  fontWeight: t.prop(\"fontWeight\", \"fontWeights\"),\n  lineHeight: t.prop(\"lineHeight\", \"lineHeights\"),\n  letterSpacing: t.prop(\"letterSpacing\", \"letterSpacings\"),\n  textAlign: true,\n  fontStyle: true,\n  wordBreak: true,\n  overflowWrap: true,\n  textOverflow: true,\n  textTransform: true,\n  whiteSpace: true,\n  textDecoration: true,\n  textDecor: { property: \"textDecoration\" },\n  noOfLines: {\n    static: {\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      display: \"-webkit-box\",\n      WebkitBoxOrient: \"vertical\",\n      //@ts-ignore\n      WebkitLineClamp: \"var(--chakra-line-clamp)\",\n    },\n    property: \"--chakra-line-clamp\",\n  },\n  isTruncated: {\n    transform(value) {\n      if (value === true) {\n        return {\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n        }\n      }\n    },\n  },\n}\n\n/**\n * Types for typography related CSS properties\n */\nexport interface TypographyProps {\n  /**\n   * The CSS `font-weight` property\n   */\n  fontWeight?: Token<number | (string & {}), \"fontWeights\">\n  /**\n   * The CSS `line-height` property\n   */\n  lineHeight?: Token<CSS.Property.LineHeight | number, \"lineHeights\">\n  /**\n   * The CSS `letter-spacing` property\n   */\n  letterSpacing?: Token<CSS.Property.LetterSpacing | number, \"letterSpacings\">\n\n  /**\n   * The CSS `font-size` property\n   */\n  fontSize?: Token<CSS.Property.FontSize | number, \"fontSizes\">\n  /**\n   * The CSS `font-family` property\n   */\n  fontFamily?: Token<CSS.Property.FontFamily, \"fonts\">\n  /**\n   * The CSS `text-align` property\n   */\n  textAlign?: Token<CSS.Property.TextAlign>\n  /**\n   * The CSS `font-style` property\n   */\n  fontStyle?: Token<CSS.Property.FontStyle>\n  /**\n   * The CSS `word-break` property\n   */\n  wordBreak?: Token<CSS.Property.WordBreak>\n  /**\n   * The CSS `overflow-wrap` property\n   */\n  overflowWrap?: Token<CSS.Property.OverflowWrap>\n  /**\n   * The CSS `text-overflow` property\n   */\n  textOverflow?: Token<CSS.Property.TextOverflow>\n  /**\n   * The CSS `text-transform` property\n   */\n  textTransform?: Token<CSS.Property.TextTransform>\n  /**\n   * The CSS `white-space` property\n   */\n  whiteSpace?: Token<CSS.Property.WhiteSpace>\n  /**\n   * The CSS `text-decoration` property\n   */\n  textDecoration?: Token<CSS.Property.TextDecoration | number>\n  /**\n   * The CSS `text-decoration` property\n   */\n  textDecor?: Token<CSS.Property.TextDecoration | number>\n  /**\n   * Used to visually truncate a text after a number of lines.\n   */\n  noOfLines?: ResponsiveValue<number>\n  /**\n   * If `true`, it clamps truncate a text after one line.\n   * @deprecated - Use `noOfLines` instead\n   */\n  isTruncated?: boolean\n}\n"],"file":"typography.js"}