{"version":3,"sources":["../../../src/config/transform.ts"],"names":["templates","auto","degreeTransform","value","transform","property","transformOrigin","translateX","t","spaceT","translateY","rotateX","rotateY","skewX","skewY"],"mappings":";;;;;AAAA;;AAGA;;AAEA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,yBADU;AAEhB,cAAY;AAFI,CAAlB;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAgB;AACtC,MAAI,qBAASA,KAAT,KAAmBA,KAAK,IAAI,IAAhC,EAAsC,OAAOA,KAAP;AACtC,SAAO,qBAASA,KAAT,IAAqBA,KAArB,WAAkCA,KAAzC;AACD,CAHD;;AAKO,IAAMC,SAAiB,GAAG;AAC/BA,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE,WADD;AAETD,IAAAA,SAFS,qBAECD,KAFD,EAEQ;AAAA;;AACf,iCAAOH,SAAS,CAACG,KAAD,CAAhB,+BAA2BA,KAA3B;AACD;AAJQ,GADoB;AAO/BG,EAAAA,eAAe,EAAE,IAPc;AAQ/BC,EAAAA,UAAU,EAAEC,UAAEC,MAAF,CAAS,sBAAT,CARmB;AAS/BC,EAAAA,UAAU,EAAEF,UAAEC,MAAF,CAAS,sBAAT,CATmB;AAU/BE,EAAAA,OAAO,EAAE;AACPN,IAAAA,QAAQ,EAAE,mBADH;AAEPD,IAAAA,SAAS,EAAEF;AAFJ,GAVsB;AAc/BU,EAAAA,OAAO,EAAE;AACPP,IAAAA,QAAQ,EAAE,mBADH;AAEPD,IAAAA,SAAS,EAAEF;AAFJ,GAdsB;AAkB/BW,EAAAA,KAAK,EAAE;AACLR,IAAAA,QAAQ,EAAE,iBADL;AAELD,IAAAA,SAAS,EAAEF;AAFN,GAlBwB;AAsB/BY,EAAAA,KAAK,EAAE;AACLT,IAAAA,QAAQ,EAAE,iBADL;AAELD,IAAAA,SAAS,EAAEF;AAFN;AAtBwB,CAA1B","sourcesContent":["import { isCssVar, isNumber } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { Config } from \"../prop-config\"\nimport { t, Token } from \"../utils\"\n\nconst templates = {\n  auto: \"var(--chakra-transform)\",\n  \"auto-gpu\": \"var(--chakra-transform-gpu)\",\n}\n\nconst degreeTransform = (value: any) => {\n  if (isCssVar(value) || value == null) return value\n  return isNumber(value) ? `${value}deg` : value\n}\n\nexport const transform: Config = {\n  transform: {\n    property: \"transform\",\n    transform(value) {\n      return templates[value] ?? value\n    },\n  },\n  transformOrigin: true,\n  translateX: t.spaceT(\"--chakra-translate-x\"),\n  translateY: t.spaceT(\"--chakra-translate-y\"),\n  rotateX: {\n    property: \"--chakra-rotate-x\",\n    transform: degreeTransform,\n  },\n  rotateY: {\n    property: \"--chakra-rotate-y\",\n    transform: degreeTransform,\n  },\n  skewX: {\n    property: \"--chakra-skew-x\",\n    transform: degreeTransform,\n  },\n  skewY: {\n    property: \"--chakra-skew-y\",\n    transform: degreeTransform,\n  },\n}\n\nexport interface TransformProps {\n  /**\n   * The CSS `transform` property\n   */\n  transform?: Token<CSS.Property.Transform | keyof typeof templates>\n  /**\n   * The CSS `transform-origin` property\n   */\n  transformOrigin?: Token<CSS.Property.TransformOrigin | number, \"sizes\">\n}\n"],"file":"transform.js"}