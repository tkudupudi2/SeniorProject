{"version":3,"sources":["../../src/use-tooltip.ts"],"names":["useDisclosure","useEventListener","useId","usePopper","popperCSSVars","callAllHandlers","px","mergeRefs","React","useTooltip","props","openDelay","closeDelay","closeOnClick","closeOnMouseDown","onOpen","onOpenProp","onClose","onCloseProp","placement","id","isOpen","isOpenProp","defaultIsOpen","arrowSize","arrowShadowColor","arrowPadding","modifiers","isDisabled","gutter","offset","htmlProps","referenceRef","getPopperProps","getArrowInnerProps","getArrowProps","tooltipId","ref","useRef","enterTimeout","exitTimeout","openWithDelay","useCallback","current","window","setTimeout","closeWithDelay","clearTimeout","onClick","onMouseDown","onKeyDown","event","key","useEffect","getTriggerProps","_ref","triggerProps","onMouseEnter","onFocus","onBlur","undefined","getTooltipPositionerProps","forwardedRef","style","var","getTooltipProps","tooltipProps","role","position","transformOrigin","varRef","show","hide"],"mappings":"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","sourcesContent":["import { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\"\nimport {\n  Placement,\n  usePopper,\n  UsePopperProps,\n  popperCSSVars,\n} from \"@chakra-ui/popper\"\nimport { callAllHandlers, px } from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    \"modifiers\" | \"gutter\" | \"offset\" | \"arrowPadding\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * The Popper.js placement of the tooltip\n   */\n  placement?: Placement\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean\n  isDisabled?: boolean\n  arrowSize?: number\n  arrowShadowColor?: string\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const {\n    referenceRef,\n    getPopperProps,\n    getArrowInnerProps,\n    getArrowProps,\n  } = usePopper({\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n  })\n\n  const tooltipId = useId(id, \"tooltip\")\n\n  const ref = React.useRef<any>(null)\n\n  const enterTimeout = React.useRef<number>()\n  const exitTimeout = React.useRef<number>()\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay)\n    }\n  }, [isDisabled, onOpen, openDelay])\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay)\n  }, [closeDelay, onClose])\n\n  const onClick = React.useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay])\n\n  const onMouseDown = React.useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay()\n    }\n  }, [closeOnMouseDown, closeWithDelay])\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay()\n    }\n  }\n\n  useEventListener(\"keydown\", onKeyDown)\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current)\n      clearTimeout(exitTimeout.current)\n    },\n    [],\n  )\n\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(\"mouseleave\", closeWithDelay, ref.current)\n\n  const getTriggerProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        ref: mergeRefs(ref, _ref, referenceRef),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return triggerProps\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onMouseDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      referenceRef,\n    ],\n  )\n\n  const getTooltipPositionerProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            ...props.style,\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? px(arrowSize)\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n          },\n        },\n        forwardedRef,\n      ),\n    [getPopperProps, arrowSize, arrowShadowColor],\n  )\n\n  const getTooltipProps = React.useCallback(\n    (props = {}, _ref = null) => {\n      const tooltipProps = {\n        ref: _ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n        style: {\n          ...props.style,\n          position: \"relative\",\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n      }\n\n      return tooltipProps\n    },\n    [htmlProps, tooltipId],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n"],"file":"use-tooltip.js"}