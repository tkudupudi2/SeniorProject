{"version":3,"sources":["../../src/use-pan-gesture.ts"],"names":["noop","PanSession","useEffect","useRef","usePointerEvent","useUnmountEffect","usePanGesture","ref","props","onPan","onPanStart","onPanEnd","onPanSessionStart","hasPanEvents","Boolean","panSession","handlers","onSessionStart","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","end"],"mappings":"AAAA,SAEEA,IAFF,EAIEC,UAJF,QAMO,kBANP;AAOA,SAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AASA,OAAO,SAASC,aAAT,CACLC,GADK,EAELC,KAFK,EAGL;AACA,MAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,UAAT;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,MAAqDJ,KAA3D;AAEA,MAAMK,YAAY,GAAGC,OAAO,CAC1BL,KAAK,IAAIC,UAAT,IAAuBC,QAAvB,IAAmCC,iBADT,CAA5B;AAIA,MAAMG,UAAU,GAAGZ,MAAM,CAAoB,IAApB,CAAzB;AAEA,MAAMa,QAAqC,GAAG;AAC5CC,IAAAA,cAAc,EAAEL,iBAD4B;AAE5CM,IAAAA,OAAO,EAAER,UAFmC;AAG5CS,IAAAA,MAAM,EAAEV,KAHoC;;AAI5CW,IAAAA,KAAK,CAACC,KAAD,EAAQC,IAAR,EAAc;AACjBP,MAAAA,UAAU,CAACQ,OAAX,GAAqB,IAArB;AACAZ,MAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGU,KAAH,EAAUC,IAAV,CAAR;AACD;;AAP2C,GAA9C;AAUApB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,2BAAAa,UAAU,CAACQ,OAAX,yCAAoBC,cAApB,CAAmCR,QAAnC;AACD,GAFQ,CAAT;;AAIA,WAASS,aAAT,CAAuBJ,KAAvB,EAA+C;AAC7CN,IAAAA,UAAU,CAACQ,OAAX,GAAqB,IAAItB,UAAJ,CAAeoB,KAAf,EAAsBL,QAAtB,CAArB;AACD;;AAEDZ,EAAAA,eAAe,CACb,MAAMG,GAAG,CAACgB,OADG,EAEb,aAFa,EAGbV,YAAY,GAAGY,aAAH,GAAmBzB,IAHlB,CAAf;AAMAK,EAAAA,gBAAgB,CAAC;AAAA;;AAAA,mCAAMU,UAAU,CAACQ,OAAjB,qBAAM,qBAAoBG,GAApB,EAAN;AAAA,GAAD,CAAhB;AACD","sourcesContent":["import {\n  AnyPointerEvent,\n  noop,\n  PanHandler,\n  PanSession,\n  PanSessionHandlers,\n} from \"@chakra-ui/utils\"\nimport React, { useEffect, useRef } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport interface UsePanGestureProps {\n  onPan?: PanHandler\n  onPanStart?: PanHandler\n  onPanEnd?: PanHandler\n  onPanSessionStart?: PanHandler\n}\n\nexport function usePanGesture(\n  ref: React.RefObject<HTMLElement>,\n  props: UsePanGestureProps,\n) {\n  const { onPan, onPanStart, onPanEnd, onPanSessionStart } = props\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart,\n  )\n\n  const panSession = useRef<PanSession | null>(null)\n\n  const handlers: Partial<PanSessionHandlers> = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  }\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlers)\n  })\n\n  function onPointerDown(event: AnyPointerEvent) {\n    panSession.current = new PanSession(event, handlers)\n  }\n\n  usePointerEvent(\n    () => ref.current,\n    \"pointerdown\",\n    hasPanEvents ? onPointerDown : noop,\n  )\n\n  useUnmountEffect(() => panSession.current?.end())\n}\n"],"file":"use-pan-gesture.js"}