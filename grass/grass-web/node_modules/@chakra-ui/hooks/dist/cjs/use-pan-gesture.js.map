{"version":3,"sources":["../../src/use-pan-gesture.ts"],"names":["usePanGesture","ref","props","onPan","onPanStart","onPanEnd","onPanSessionStart","hasPanEvents","Boolean","panSession","handlers","onSessionStart","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","PanSession","noop","end"],"mappings":";;;;;AAAA;;AAOA;;AACA;;AACA;;AASO,SAASA,aAAT,CACLC,GADK,EAELC,KAFK,EAGL;AAAA,MACQC,KADR,GAC2DD,KAD3D,CACQC,KADR;AAAA,MACeC,UADf,GAC2DF,KAD3D,CACeE,UADf;AAAA,MAC2BC,QAD3B,GAC2DH,KAD3D,CAC2BG,QAD3B;AAAA,MACqCC,iBADrC,GAC2DJ,KAD3D,CACqCI,iBADrC;AAGA,MAAMC,YAAY,GAAGC,OAAO,CAC1BL,KAAK,IAAIC,UAAT,IAAuBC,QAAvB,IAAmCC,iBADT,CAA5B;AAIA,MAAMG,UAAU,GAAG,mBAA0B,IAA1B,CAAnB;AAEA,MAAMC,QAAqC,GAAG;AAC5CC,IAAAA,cAAc,EAAEL,iBAD4B;AAE5CM,IAAAA,OAAO,EAAER,UAFmC;AAG5CS,IAAAA,MAAM,EAAEV,KAHoC;AAI5CW,IAAAA,KAJ4C,iBAItCC,KAJsC,EAI/BC,IAJ+B,EAIzB;AACjBP,MAAAA,UAAU,CAACQ,OAAX,GAAqB,IAArB;AACAZ,MAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGU,KAAH,EAAUC,IAAV,CAAR;AACD;AAP2C,GAA9C;AAUA,wBAAU,YAAM;AAAA;;AACd,2BAAAP,UAAU,CAACQ,OAAX,yCAAoBC,cAApB,CAAmCR,QAAnC;AACD,GAFD;;AAIA,WAASS,aAAT,CAAuBJ,KAAvB,EAA+C;AAC7CN,IAAAA,UAAU,CAACQ,OAAX,GAAqB,IAAIG,iBAAJ,CAAeL,KAAf,EAAsBL,QAAtB,CAArB;AACD;;AAED,wCACE;AAAA,WAAMT,GAAG,CAACgB,OAAV;AAAA,GADF,EAEE,aAFF,EAGEV,YAAY,GAAGY,aAAH,GAAmBE,WAHjC;AAMA,0CAAiB;AAAA;;AAAA,mCAAMZ,UAAU,CAACQ,OAAjB,qBAAM,qBAAoBK,GAApB,EAAN;AAAA,GAAjB;AACD","sourcesContent":["import {\n  AnyPointerEvent,\n  noop,\n  PanHandler,\n  PanSession,\n  PanSessionHandlers,\n} from \"@chakra-ui/utils\"\nimport React, { useEffect, useRef } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport interface UsePanGestureProps {\n  onPan?: PanHandler\n  onPanStart?: PanHandler\n  onPanEnd?: PanHandler\n  onPanSessionStart?: PanHandler\n}\n\nexport function usePanGesture(\n  ref: React.RefObject<HTMLElement>,\n  props: UsePanGestureProps,\n) {\n  const { onPan, onPanStart, onPanEnd, onPanSessionStart } = props\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart,\n  )\n\n  const panSession = useRef<PanSession | null>(null)\n\n  const handlers: Partial<PanSessionHandlers> = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  }\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlers)\n  })\n\n  function onPointerDown(event: AnyPointerEvent) {\n    panSession.current = new PanSession(event, handlers)\n  }\n\n  usePointerEvent(\n    () => ref.current,\n    \"pointerdown\",\n    hasPanEvents ? onPointerDown : noop,\n  )\n\n  useUnmountEffect(() => panSession.current?.end())\n}\n"],"file":"use-pan-gesture.js"}