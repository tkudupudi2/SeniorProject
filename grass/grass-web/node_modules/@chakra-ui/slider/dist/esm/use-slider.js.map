{"version":3,"sources":["../../src/use-slider.ts"],"names":["useBoolean","useCallbackRef","useControllableState","useDimensions","useIds","useLatestRef","usePanGesture","useUpdateEffect","mergeRefs","ariaAttr","callAllHandlers","clampValue","dataAttr","focus","getBox","normalizeEventKey","percentToValue","roundValueToStep","valueToPercent","useCallback","useMemo","useRef","getPartsStyle","useSlider","props","min","max","onChange","value","valueProp","defaultValue","isReversed","orientation","id","idProp","isDisabled","isReadOnly","onChangeEnd","onChangeEndProp","step","getAriaValueText","getAriaValueTextProp","ariaValueText","ariaLabel","ariaLabelledBy","name","focusThumbOnChange","htmlProps","onChangeStart","computedValue","setValue","getDefaultValue","isDragging","setDragging","isFocused","setFocused","isInteractive","valueRef","reversedValue","trackValue","trackPercent","isVertical","trackRef","thumbRef","rootRef","thumbId","trackId","getValueFromPointer","event","current","undefined","trackRect","borderBox","clientX","clientY","touches","diff","bottom","left","length","height","width","percent","nextValue","parseFloat","tenSteps","oneStep","constrain","actions","stepUp","next","stepDown","reset","stepTo","onKeyDown","eventKey","keyMap","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","preventDefault","stopPropagation","valueText","thumbBoxModel","thumbStyle","rootStyle","trackStyle","innerTrackStyle","thumbRect","focusThumb","setTimeout","setValueFromPointer","onPanSessionStart","onPanStart","on","onPan","onPanEnd","off","getRootProps","ref","tabIndex","style","getTrackProps","getInnerTrackProps","getThumbProps","role","onFocus","onBlur","getMarkerProps","isInRange","isHighlighted","markerPercent","markerStyle","position","pointerEvents","orient","vertical","horizontal","getInputProps","type","state","options"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableState,\n  useDimensions,\n  useIds,\n  useLatestRef,\n  usePanGesture,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { EventKeyMap, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  AnyPointerEvent,\n  ariaAttr,\n  callAllHandlers,\n  clampValue,\n  dataAttr,\n  focus,\n  getBox,\n  normalizeEventKey,\n  percentToValue,\n  roundValueToStep,\n  valueToPercent,\n} from \"@chakra-ui/utils\"\nimport { CSSProperties, useCallback, useMemo, useRef } from \"react\"\nimport { getPartsStyle } from \"./utils\"\n\nexport interface UseSliderProps {\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   * @default 100\n   */\n  max?: number\n  /**\n   * The step in which increments/decrements have to be made\n   * @default 1\n   */\n  step?: number\n  /**\n   * The value of the slider in controlled mode\n   */\n  value?: number\n  /**\n   * The initial value of the slider in uncontrolled mode\n   */\n  defaultValue?: number\n  /**\n   * orientation of the slider\n   * @default \"horizontal\"\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n  /**\n   * If `true`, the value will be incremented or decremented in reverse.\n   */\n  isReversed?: boolean\n  /**\n   * function gets called whenever the user starts dragging the slider handle\n   */\n  onChangeStart?(value: number): void\n  /**\n   * function gets called whenever the user stops dragging the slider handle.\n   */\n  onChangeEnd?(value: number): void\n  /**\n   * function gets called whenever the slider handle is being dragged or clicked\n   */\n  onChange?(value: number): void\n  /**\n   * The base `id` to use for the slider and its components\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms\n   */\n  name?: string\n  /**\n   * If `true`, the slider will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the slider will be in `read-only` state\n   */\n  isReadOnly?: boolean\n  /**\n   * Function that returns the `aria-valuetext` for screen readers.\n   * It is mostly used to generate a more human-readable\n   * representation of the value for assistive technologies\n   */\n  getAriaValueText?(value: number): string\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The static string to use used for `aria-valuetext`\n   */\n  \"aria-valuetext\"?: string\n  /**\n   * The static string to use used for `aria-label`\n   * if no visible label is used.\n   */\n  \"aria-label\"?: string\n  /**\n   * The static string `aria-labelledby` that points to the\n   * ID of the element that serves as label for the slider\n   */\n  \"aria-labelledby\"?: string\n}\n\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#slider\n */\nexport function useSlider(props: UseSliderProps) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed,\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    ...htmlProps\n  } = props\n\n  const onChangeStart = useCallbackRef(onChangeEndProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  /**\n   * Enable the slider handle controlled and uncontrolled scenarios\n   */\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? getDefaultValue(min, max),\n    onChange,\n  })\n\n  const [isDragging, setDragging] = useBoolean()\n  const [isFocused, setFocused] = useBoolean()\n\n  const isInteractive = !(isDisabled || isReadOnly)\n\n  /**\n   * Constrain the value because it can't be less than min\n   * or greater than max\n   */\n  const value = clampValue(computedValue, min, max)\n  const valueRef = useLatestRef(value)\n\n  const reversedValue = max - value + min\n  const trackValue = isReversed ? reversedValue : value\n  const trackPercent = valueToPercent(trackValue, min, max)\n\n  const isVertical = orientation === \"vertical\"\n\n  /**\n   * Let's keep a reference to the slider track and thumb\n   */\n  const trackRef = useRef<any>(null)\n  const thumbRef = useRef<any>(null)\n  const rootRef = useRef<any>(null)\n\n  /**\n   * Generate unique ids for component parts\n   */\n  const [thumbId, trackId] = useIds(idProp, `slider-thumb`, `slider-track`)\n\n  /**\n   * Get relative value of slider from the event by tracking\n   * how far you clicked within the track to determine the value\n   *\n   * @todo - Refactor this later on to use info from pan session\n   */\n\n  const getValueFromPointer = useCallback(\n    (event) => {\n      if (!trackRef.current) return undefined\n\n      const trackRect = getBox(trackRef.current).borderBox\n      const { clientX, clientY } = event.touches?.[0] ?? event\n\n      const diff = isVertical\n        ? trackRect.bottom - clientY\n        : clientX - trackRect.left\n\n      const length = isVertical ? trackRect.height : trackRect.width\n      let percent = diff / length\n\n      if (isReversed) {\n        percent = 1 - percent\n      }\n\n      let nextValue = percentToValue(percent, min, max)\n\n      if (step) {\n        nextValue = parseFloat(roundValueToStep(nextValue, min, step))\n      }\n\n      nextValue = clampValue(nextValue, min, max)\n\n      return nextValue\n    },\n    [isVertical, isReversed, max, min, step],\n  )\n\n  const tenSteps = (max - min) / 10\n  const oneStep = step || (max - min) / 100\n\n  const constrain = useCallback(\n    (value: number) => {\n      // bail out if slider isn't interactive\n      if (!isInteractive) return\n      value = parseFloat(roundValueToStep(value, min, oneStep))\n      value = clampValue(value, min, max)\n      setValue(value)\n    },\n    [oneStep, max, min, setValue, isInteractive],\n  )\n\n  const actions = useMemo(\n    () => ({\n      stepUp: (step = oneStep) => {\n        const next = isReversed ? value - step : value + step\n        constrain(next)\n      },\n      stepDown: (step = oneStep) => {\n        const next = isReversed ? value + step : value - step\n        constrain(next)\n      },\n      reset: () => constrain(defaultValue || 0),\n      stepTo: (value: number) => constrain(value),\n    }),\n    [constrain, isReversed, value, oneStep, defaultValue],\n  )\n\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => actions.stepUp(),\n        ArrowUp: () => actions.stepUp(),\n        ArrowLeft: () => actions.stepDown(),\n        ArrowDown: () => actions.stepDown(),\n        PageUp: () => actions.stepUp(tenSteps),\n        PageDown: () => actions.stepDown(tenSteps),\n        Home: () => constrain(min),\n        End: () => constrain(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [actions, constrain, max, min, tenSteps],\n  )\n\n  /**\n   * ARIA (Optional): To define a human readable representation of the value,\n   * we allow users pass aria-valuetext.\n   */\n  const valueText = getAriaValueText?.(value) ?? ariaValueText\n\n  /**\n   * Measure the dimensions of the thumb so\n   * we can center it within the track properly\n   */\n  const thumbBoxModel = useDimensions(thumbRef)\n\n  /**\n   * Compute styles for all component parts.\n   */\n  const { thumbStyle, rootStyle, trackStyle, innerTrackStyle } = useMemo(() => {\n    const thumbRect = thumbBoxModel?.borderBox ?? { width: 0, height: 0 }\n    return getPartsStyle({\n      isReversed,\n      orientation,\n      thumbRect,\n      trackPercent,\n    })\n  }, [isReversed, orientation, thumbBoxModel?.borderBox, trackPercent])\n\n  const focusThumb = useCallback(() => {\n    if (thumbRef.current && focusThumbOnChange) {\n      setTimeout(() => focus(thumbRef.current))\n    }\n  }, [focusThumbOnChange])\n\n  useUpdateEffect(() => {\n    focusThumb()\n  }, [value])\n\n  const setValueFromPointer = (event: AnyPointerEvent) => {\n    const nextValue = getValueFromPointer(event)\n    if (nextValue != null && nextValue !== valueRef.current) {\n      setValue(nextValue)\n    }\n  }\n\n  usePanGesture(rootRef, {\n    onPanSessionStart(event) {\n      if (!isInteractive) return\n      setValueFromPointer(event)\n      focusThumb()\n    },\n    onPanStart() {\n      if (!isInteractive) return\n      setDragging.on()\n      onChangeStart?.(valueRef.current)\n    },\n    onPan(event) {\n      if (!isInteractive) return\n      setValueFromPointer(event)\n    },\n    onPanEnd() {\n      if (!isInteractive) return\n      setDragging.off()\n      onChangeEnd?.(valueRef.current)\n    },\n  })\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: {\n        ...props.style,\n        ...rootStyle,\n      },\n    }),\n    [htmlProps, isDisabled, isFocused, rootStyle],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, trackRef),\n      id: trackId,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: {\n        ...props.style,\n        ...trackStyle,\n      },\n    }),\n    [isDisabled, trackId, trackStyle],\n  )\n\n  const getInnerTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      style: {\n        ...props.style,\n        ...innerTrackStyle,\n      },\n    }),\n    [innerTrackStyle],\n  )\n\n  const getThumbProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, thumbRef),\n      role: \"slider\",\n      tabIndex: 0,\n      id: thumbId,\n      \"data-active\": dataAttr(isDragging),\n      \"aria-valuetext\": valueText,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": value,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabel ? undefined : ariaLabelledBy,\n      style: {\n        ...props.style,\n        ...thumbStyle,\n      },\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    }),\n    [\n      ariaLabel,\n      ariaLabelledBy,\n      isDisabled,\n      isDragging,\n      isReadOnly,\n      max,\n      min,\n      onKeyDown,\n      orientation,\n      setFocused.off,\n      setFocused.on,\n      thumbId,\n      thumbStyle,\n      value,\n      valueText,\n    ],\n  )\n\n  const getMarkerProps: PropGetter<any, { value?: any }> = useCallback(\n    (props = {}, ref = null) => {\n      const isInRange = !(props.value < min || props.value > max)\n      const isHighlighted = value >= props.value\n      const markerPercent = valueToPercent(props.value, min, max)\n\n      const markerStyle: React.CSSProperties = {\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        ...orient({\n          orientation,\n          vertical: {\n            bottom: isReversed\n              ? `${100 - markerPercent}%`\n              : `${markerPercent}%`,\n          },\n          horizontal: {\n            left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`,\n          },\n        }),\n      }\n\n      return {\n        ...props,\n        ref,\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(!isInRange),\n        \"data-highlighted\": dataAttr(isHighlighted),\n        style: {\n          ...props.style,\n          ...markerStyle,\n        },\n      }\n    },\n    [isDisabled, isReversed, max, min, orientation, value],\n  )\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      type: \"hidden\",\n      value,\n      name,\n    }),\n    [name, value],\n  )\n\n  return {\n    state: {\n      value,\n      isFocused,\n      isDragging,\n    },\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n  }\n}\n\nexport type UseSliderReturn = ReturnType<typeof useSlider>\n\nfunction orient(options: {\n  orientation: UseSliderProps[\"orientation\"]\n  vertical: CSSProperties\n  horizontal: CSSProperties\n}) {\n  const { orientation, vertical, horizontal } = options\n  return orientation === \"vertical\" ? vertical : horizontal\n}\n\n/**\n * The browser <input type=\"range\" /> calculates\n * the default value of a slider by using mid-point\n * between the min and the max.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\n */\nfunction getDefaultValue(min: number, max: number) {\n  return max < min ? min : min + (max - min) / 2\n}\n"],"file":"use-slider.js"}