{"version":3,"sources":["../../src/use-radio.ts"],"names":["useBoolean","useControllableProp","ariaAttr","callAllHandlers","dataAttr","pick","warn","scheduleMicrotask","mergeRefs","visuallyHiddenStyle","useCallback","useRef","useState","useFormControl","useRadio","props","defaultIsChecked","defaultChecked","isChecked","isCheckedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isInvalid","name","value","htmlProps","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","isCheckedState","setChecked","Boolean","isControlled","condition","message","handleChange","event","preventDefault","target","checked","onKeyDown","key","on","onKeyUp","off","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","inputProps","getInputProps","forwardedRef","ownProps","focus","trulyDisabled","disabled","type","onBlur","onFocus","style","getLabelProps","stop","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import { useBoolean, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  dataAttr,\n  pick,\n  warn,\n  scheduleMicrotask,\n} from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @deprecated Please use `defaultChecked` which mirrors the default prop\n   * name for radio elements.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      setActive.on,\n      setActive.off,\n      setHovering.on,\n      setHovering.off,\n    ],\n  )\n\n  const inputProps = useFormControl<HTMLInputElement>(props)\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const ownProps = pick(inputProps, [\n        \"id\",\n        \"disabled\",\n        \"readOnly\",\n        \"required\",\n        \"aria-invalid\",\n        \"aria-required\",\n        \"aria-readonly\",\n        \"aria-describedby\",\n        \"onFocus\",\n        \"onBlur\",\n      ])\n\n      /**\n       * This is a workaround for React Concurrent Mode issue.\n       * @see Issue https://github.com/facebook/react/issues/18591.\n       *\n       * Remove once it's fixed.\n       */\n      const focus = () => {\n        scheduleMicrotask(() => {\n          setFocused.on()\n        })\n      }\n\n      const trulyDisabled = ownProps.disabled && !isFocusable\n\n      return {\n        ...props,\n        ...ownProps,\n        ref: mergeRefs(forwardedRef, ref),\n        type: \"radio\",\n        name,\n        value,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(ownProps.onBlur, props.onBlur, setFocused.off),\n        onFocus: callAllHandlers(ownProps.onFocus, props.onFocus, focus),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        checked: isChecked,\n        disabled: trulyDisabled,\n        \"aria-disabled\": ariaAttr(trulyDisabled),\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      inputProps,\n      isFocusable,\n      name,\n      value,\n      handleChange,\n      setFocused,\n      onKeyDown,\n      onKeyUp,\n      isChecked,\n    ],\n  )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stop),\n    onTouchStart: callAllHandlers(props.onTouchStart, stop),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"],"file":"use-radio.js"}