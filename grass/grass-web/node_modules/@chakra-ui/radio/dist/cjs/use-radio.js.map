{"version":3,"sources":["../../src/use-radio.ts"],"names":["useRadio","props","defaultIsChecked","defaultChecked","isCheckedProp","isChecked","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","Boolean","isCheckedState","setChecked","isControlled","condition","message","handleChange","event","preventDefault","target","checked","onKeyDown","key","on","onKeyUp","off","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","inputProps","getInputProps","forwardedRef","ownProps","focus","trulyDisabled","disabled","type","onBlur","onFocus","style","visuallyHiddenStyle","getLabelProps","stop","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import { useBoolean, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  dataAttr,\n  pick,\n  warn,\n  scheduleMicrotask,\n} from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @deprecated Please use `defaultChecked` which mirrors the default prop\n   * name for radio elements.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      setActive.on,\n      setActive.off,\n      setHovering.on,\n      setHovering.off,\n    ],\n  )\n\n  const inputProps = useFormControl<HTMLInputElement>(props)\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const ownProps = pick(inputProps, [\n        \"id\",\n        \"disabled\",\n        \"readOnly\",\n        \"required\",\n        \"aria-invalid\",\n        \"aria-required\",\n        \"aria-readonly\",\n        \"aria-describedby\",\n        \"onFocus\",\n        \"onBlur\",\n      ])\n\n      /**\n       * This is a workaround for React Concurrent Mode issue.\n       * @see Issue https://github.com/facebook/react/issues/18591.\n       *\n       * Remove once it's fixed.\n       */\n      const focus = () => {\n        scheduleMicrotask(() => {\n          setFocused.on()\n        })\n      }\n\n      const trulyDisabled = ownProps.disabled && !isFocusable\n\n      return {\n        ...props,\n        ...ownProps,\n        ref: mergeRefs(forwardedRef, ref),\n        type: \"radio\",\n        name,\n        value,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(ownProps.onBlur, props.onBlur, setFocused.off),\n        onFocus: callAllHandlers(ownProps.onFocus, props.onFocus, focus),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        checked: isChecked,\n        disabled: trulyDisabled,\n        \"aria-disabled\": ariaAttr(trulyDisabled),\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      inputProps,\n      isFocusable,\n      name,\n      value,\n      handleChange,\n      setFocused,\n      onKeyDown,\n      onKeyUp,\n      isChecked,\n    ],\n  )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stop),\n    onTouchStart: callAllHandlers(props.onTouchStart, stop),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"],"file":"use-radio.js"}