{"version":3,"file":"next-urql.min.js","sources":["../src/init-urql-client.ts","../src/with-urql-client.ts"],"sourcesContent":["import { createClient, Client, ClientOptions } from 'urql';\n\nlet urqlClient: Client | null = null;\n\nexport function resetClient() {\n  urqlClient = null;\n}\n\nexport function initUrqlClient(\n  clientOptions: ClientOptions,\n  canEnableSuspense: boolean\n): Client | null {\n  // Create a new Client for every server-side rendered request.\n  // This ensures we reset the state for each rendered page.\n  // If there is an exising client instance on the client-side, use it.\n  const isServer = typeof window === 'undefined';\n  if (isServer || !urqlClient) {\n    urqlClient = createClient({\n      ...clientOptions,\n      suspense: canEnableSuspense && (isServer || clientOptions.suspense),\n    });\n    // Serialize the urqlClient to null on the client-side.\n    // This ensures we don't share client and server instances of the urqlClient.\n    (urqlClient as any).toJSON = () => null;\n  }\n\n  // Return both the Client instance and the ssrCache.\n  return urqlClient;\n}\n","import React, { createElement, useState } from 'react';\nimport ssrPrepass from 'react-ssr-prepass';\n\nimport {\n  Provider,\n  ssrExchange,\n  dedupExchange,\n  cacheExchange,\n  fetchExchange,\n} from 'urql';\n\nimport { initUrqlClient, resetClient } from './init-urql-client';\n\nimport {\n  NextUrqlClientConfig,\n  NextUrqlContext,\n  WithUrqlProps,\n  WithUrqlClientOptions,\n  NextComponentType,\n  SSRExchange,\n  NextUrqlPageContext,\n} from './types';\n\nlet ssr: SSRExchange;\n\nexport function withUrqlClient(\n  getClientConfig: NextUrqlClientConfig,\n  options?: WithUrqlClientOptions\n) {\n  if (!options) options = {};\n\n  return <C extends NextComponentType = NextComponentType>(\n    AppOrPage: C\n  ): NextComponentType => {\n    const shouldEnableSuspense = Boolean(\n      (AppOrPage.getInitialProps || options!.ssr) && !options!.neverSuspend\n    );\n\n    const WithUrql = ({\n      pageProps,\n      urqlClient,\n      urqlState,\n      ...rest\n    }: WithUrqlProps) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const forceUpdate = useState(0);\n      const urqlServerState = (pageProps && pageProps.urqlState) || urqlState;\n\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const client = React.useMemo(() => {\n        if (urqlClient) {\n          return urqlClient;\n        }\n\n        if (!ssr || typeof window === 'undefined') {\n          // We want to force the cache to hydrate, we do this by setting the isClient flag to true\n          ssr = ssrExchange({ initialState: urqlServerState, isClient: true });\n        }\n\n        const clientConfig = getClientConfig(ssr);\n        if (!clientConfig.exchanges) {\n          // When the user does not provide exchanges we make the default assumption.\n          clientConfig.exchanges = [\n            dedupExchange,\n            cacheExchange,\n            ssr,\n            fetchExchange,\n          ];\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return initUrqlClient(clientConfig, shouldEnableSuspense)!;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [urqlClient, urqlServerState, forceUpdate[0]]);\n\n      const resetUrqlClient = () => {\n        resetClient();\n        ssr = ssrExchange({ initialState: undefined });\n        forceUpdate[1](forceUpdate[0] + 1);\n      };\n\n      return createElement(\n        Provider,\n        { value: client },\n        createElement(AppOrPage, {\n          ...rest,\n          pageProps,\n          urqlClient: client,\n          resetUrqlClient,\n        })\n      );\n    };\n\n    // Set the displayName to indicate use of withUrqlClient.\n    const displayName = AppOrPage.displayName || AppOrPage.name || 'Component';\n    WithUrql.displayName = `withUrqlClient(${displayName})`;\n\n    if (AppOrPage.getInitialProps || options!.ssr) {\n      WithUrql.getInitialProps = async (appOrPageCtx: NextUrqlPageContext) => {\n        const AppTree = appOrPageCtx.AppTree!;\n\n        // Determine if we are wrapping an App component or a Page component.\n        const isApp = !!appOrPageCtx.Component;\n        const ctx = isApp ? appOrPageCtx.ctx! : appOrPageCtx;\n\n        const ssrCache = ssrExchange({ initialState: undefined });\n        const clientConfig = getClientConfig(ssrCache, ctx);\n        if (!clientConfig.exchanges) {\n          // When the user does not provide exchanges we make the default assumption.\n          clientConfig.exchanges = [\n            dedupExchange,\n            cacheExchange,\n            ssrCache,\n            fetchExchange,\n          ];\n        }\n\n        const urqlClient = initUrqlClient(clientConfig, !options!.neverSuspend);\n\n        if (urqlClient) {\n          (ctx as NextUrqlContext).urqlClient = urqlClient;\n        }\n\n        // Run the wrapped component's getInitialProps function.\n        let pageProps = {} as any;\n        if (AppOrPage.getInitialProps) {\n          pageProps = await AppOrPage.getInitialProps(\n            appOrPageCtx as NextUrqlPageContext\n          );\n        }\n\n        // Check the window object to determine whether or not we are on the server.\n        // getInitialProps runs on the server for initial render, and on the client for navigation.\n        // We only want to run the prepass step on the server.\n        if (typeof window !== 'undefined') {\n          return { ...pageProps, urqlClient };\n        }\n\n        const props = { ...pageProps, urqlClient };\n        const appTreeProps = isApp ? props : { pageProps: props };\n\n        // Run the prepass step on AppTree. This will run all urql queries on the server.\n        if (!options!.neverSuspend) {\n          await ssrPrepass(createElement(AppTree, appTreeProps));\n        }\n\n        return {\n          ...pageProps,\n          urqlState: ssrCache ? ssrCache.extractData() : undefined,\n          urqlClient,\n        };\n      };\n    }\n\n    return WithUrql;\n  };\n}\n"],"names":["urqlClient","urqlServerState","client","withUrqlClient","urqlState","ssr","initialState","exchanges","resetUrqlClient","displayName","pageProps","value","const","clientConfig","isApp","Component","Promise","getInitialProps"],"mappings":"6KAKEA,+MAkByC,6CAPzC,qICeA,sLAeUC,6BAGAC,uIAxBIC,oEA6BmCC,aAEzCC,2BAAoBC,4DAIlBA,aAAcC,iDAedC,6EAGJP,+EAgBEQ,UAAWC,8CAXXC,uCAIAX,EAAYE,yDA8DZF,4NAXFY,yOAhCMC,YACFC,MAAJC,wBAEeR,qCAQTP,4FAOFU,mGAtBOM,wDAJJC"}