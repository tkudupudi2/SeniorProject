{"version":3,"file":"react-ssr-prepass.es.js","sources":["../src/symbols.js","../src/element.js","../src/internals/context.js","../src/internals/error.js","../src/internals/state.js","../src/internals/objectIs.js","../src/internals/dispatcher.js","../src/render/lazyComponent.js","../src/render/functionComponent.js","../src/render/classComponent.js","../src/visitor.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport type { Node } from 'react'\n\nlet Element = 0xeac7\nlet Portal = 0xeaca\nlet Fragment = 0xeacb\nlet StrictMode = 0xeacc\nlet Profiler = 0xead2\nlet ContextProvider = 0xeacd\nlet ContextConsumer = 0xeace\nlet ConcurrentMode = 0xeacf\nlet ForwardRef = 0xead0\nlet Suspense = 0xead1\nlet Memo = 0xead3\nlet Lazy = 0xead4\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for\n  Element = symbolFor('react.element')\n  Portal = symbolFor('react.portal')\n  Fragment = symbolFor('react.fragment')\n  StrictMode = symbolFor('react.strict_mode')\n  Profiler = symbolFor('react.profiler')\n  ContextProvider = symbolFor('react.provider')\n  ContextConsumer = symbolFor('react.context')\n  ConcurrentMode = Symbol.for('react.concurrent_mode')\n  ForwardRef = symbolFor('react.forward_ref')\n  Suspense = symbolFor('react.suspense')\n  Memo = symbolFor('react.memo')\n  Lazy = symbolFor('react.lazy')\n}\n\n/** Literal types representing the ReactSymbol values. These values do not actually match the values from react-is! */\nexport type ReactSymbol =\n  | 'react.element' /* 0xeac7 | Symbol(react.element) */\n  | 'react.portal' /* 0xeaca | Symbol(react.portal) */\n  | 'react.fragment' /* 0xeacb | Symbol(react.fragment) */\n  | 'react.strict_mode' /* 0xeacc | Symbol(react.strict_mode) */\n  | 'react.profiler' /* 0xead2 | Symbol(react.profiler) */\n  | 'react.provider' /* 0xeacd | Symbol(react.provider) */\n  | 'react.context' /* 0xeace | Symbol(react.context) */\n  | 'react.concurrent_mode' /* 0xeacf | Symbol(react.concurrent_mode) */\n  | 'react.forward_ref' /* 0xead0 | Symbol(react.forward_ref) */\n  | 'react.suspense' /* 0xead1 | Symbol(react.suspense) */\n  | 'react.memo' /* 0xead3 | Symbol(react.memo) */\n  | 'react.lazy' /* 0xead4 | Symbol(react.lazy) */\n\nexport const REACT_ELEMENT_TYPE: 'react.element' = (Element: any)\nexport const REACT_PORTAL_TYPE: 'react.portal' = (Portal: any)\nexport const REACT_FRAGMENT_TYPE: 'react.fragment' = (Fragment: any)\nexport const REACT_STRICT_MODE_TYPE: 'react.strict_mode' = (StrictMode: any)\nexport const REACT_PROFILER_TYPE: 'react.profiler' = (Profiler: any)\nexport const REACT_PROVIDER_TYPE: 'react.provider' = (ContextProvider: any)\nexport const REACT_CONTEXT_TYPE: 'react.context' = (ContextConsumer: any)\nexport const REACT_CONCURRENT_MODE_TYPE: 'react.concurrent_mode' = (ConcurrentMode: any)\nexport const REACT_FORWARD_REF_TYPE: 'react.forward_ref' = (ForwardRef: any)\nexport const REACT_SUSPENSE_TYPE: 'react.suspense' = (Suspense: any)\nexport const REACT_MEMO_TYPE: 'react.memo' = (Memo: any)\nexport const REACT_LAZY_TYPE: 'react.lazy' = (Lazy: any)\n","// @flow\n\nimport { Children, type Node, type Element, type ComponentType } from 'react'\nimport type { AbstractContext, AbstractElement } from './types'\n\nimport {\n  type ReactSymbol,\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\n/** Is a given Component a class component */\nexport const shouldConstruct = (Comp: ComponentType<*>): boolean %checks =>\n  (Comp: any).prototype && (Comp: any).prototype.isReactComponent\n\n/** Determine the type of element using react-is with applied fixes */\nexport const typeOf = (x: AbstractElement): ReactSymbol | void => {\n  switch (x.$$typeof) {\n    case REACT_PORTAL_TYPE:\n      return REACT_PORTAL_TYPE\n    case REACT_ELEMENT_TYPE:\n      switch (x.type) {\n        case REACT_CONCURRENT_MODE_TYPE:\n          return REACT_CONCURRENT_MODE_TYPE\n        case REACT_FRAGMENT_TYPE:\n          return REACT_FRAGMENT_TYPE\n        case REACT_PROFILER_TYPE:\n          return REACT_PROFILER_TYPE\n        case REACT_STRICT_MODE_TYPE:\n          return REACT_STRICT_MODE_TYPE\n        case REACT_SUSPENSE_TYPE:\n          return REACT_SUSPENSE_TYPE\n\n        default: {\n          switch (x.type && ((x.type: any).$$typeof: ReactSymbol)) {\n            case REACT_LAZY_TYPE:\n              return REACT_LAZY_TYPE\n            case REACT_MEMO_TYPE:\n              return REACT_MEMO_TYPE\n            case REACT_CONTEXT_TYPE:\n              return REACT_CONTEXT_TYPE\n            case REACT_PROVIDER_TYPE:\n              return REACT_PROVIDER_TYPE\n            case REACT_FORWARD_REF_TYPE:\n              return REACT_FORWARD_REF_TYPE\n            default:\n              return REACT_ELEMENT_TYPE\n          }\n        }\n      }\n\n    default:\n      return undefined\n  }\n}\n\ntype ScalarNode = null | boolean | string | number\n\n/** Rebound Children.toArray with modified AbstractElement types */\nconst toArray: (node?: Node) => Array<ScalarNode | AbstractElement> =\n  Children.toArray\n\n/** Checks whether the `node` is an AbstractElement */\nconst isAbstractElement = (\n  node: ScalarNode | AbstractElement\n): boolean %checks => node !== null && typeof node === 'object'\n\n/** Returns a flat AbstractElement array for a given AbstractElement node */\nexport const getChildrenArray = (node?: Node): AbstractElement[] => {\n  // $FlowFixMe\n  return toArray(node).filter(isAbstractElement)\n}\n\n/** Returns merged props given a props and defaultProps object */\nexport const computeProps = (props: Object, defaultProps: void | Object) => {\n  return typeof defaultProps === 'object'\n    ? Object.assign({}, defaultProps, props)\n    : props\n}\n","// @flow\n\nimport type {\n  AbstractContext,\n  UserElement,\n  ContextMap,\n  ContextStore,\n  ContextEntry\n} from '../types'\n\n/** The context is kept as a Map from a Context value to the current\n   value on the React element tree.\n   The legacy context is kept as a simple object.\n   When the tree is being walked modifications are made by assigning\n   new legacy context maps or new context values.\n   These changes are kept in the `prev` variables and must be flushed\n   before continuing to walk the tree.\n   After walking the children they can be restored.\n   This way the context recursively restores itself on the way up. */\n\nlet currentContextStore: ContextStore = new Map()\nlet currentContextMap: ContextMap = {}\n\nlet prevContextMap: void | ContextMap = undefined\nlet prevContextEntry: void | ContextEntry = undefined\n\nexport const getCurrentContextMap = (): ContextMap =>\n  Object.assign({}, currentContextMap)\nexport const getCurrentContextStore = (): ContextStore =>\n  new Map(currentContextStore)\n\nexport const flushPrevContextMap = (): void | ContextMap => {\n  const prev = prevContextMap\n  prevContextMap = undefined\n  return prev\n}\n\nexport const flushPrevContextStore = (): void | ContextEntry => {\n  const prev = prevContextEntry\n  prevContextEntry = undefined\n  return prev\n}\n\nexport const restoreContextMap = (prev: void | ContextMap) => {\n  if (prev !== undefined) {\n    Object.assign(currentContextMap, prev)\n  }\n}\n\nexport const restoreContextStore = (prev: void | ContextEntry) => {\n  if (prev !== undefined) {\n    currentContextStore.set(prev[0], prev[1])\n  }\n}\n\nexport const setCurrentContextMap = (map: ContextMap) => {\n  prevContextMap = undefined\n  currentContextMap = map\n}\n\nexport const setCurrentContextStore = (store: ContextStore) => {\n  prevContextEntry = undefined\n  currentContextStore = store\n}\n\nexport const assignContextMap = (map: ContextMap) => {\n  prevContextMap = {}\n  for (const name in map) {\n    prevContextMap[name] = currentContextMap[name]\n    currentContextMap[name] = map[name]\n  }\n}\n\nexport const setContextValue = (context: AbstractContext, value: mixed) => {\n  prevContextEntry = [context, currentContextStore.get(context)]\n  currentContextStore.set(context, value)\n}\n\nexport const readContextValue = (context: AbstractContext) => {\n  const value = currentContextStore.get(context)\n  if (value !== undefined) {\n    return value\n  }\n\n  // Return default if context has no value yet\n  return context._currentValue\n}\n\nconst emptyContext = {}\n\nexport const maskContext = (type: $PropertyType<UserElement, 'type'>) => {\n  const { contextType, contextTypes } = type\n\n  if (contextType) {\n    return readContextValue(contextType)\n  } else if (!contextTypes) {\n    return emptyContext\n  }\n\n  const maskedContext = {}\n  for (const name in contextTypes) {\n    maskedContext[name] = currentContextMap[name]\n  }\n\n  return maskedContext\n}\n","// @flow\n\nimport type { ClassFrame } from '../types'\n\n/** The current error boundary frame determines where to continue rendering when an error is raised */\nlet currentErrorFrame: null | ClassFrame = null\n\nexport const getCurrentErrorFrame = (): ClassFrame | null => currentErrorFrame\n\nexport const setCurrentErrorFrame = (frame?: ClassFrame | null) => {\n  currentErrorFrame = frame || null\n}\n","// @flow\n\nimport type { RendererState } from '../types'\n\n/** The current global renderer state per render cycle */\nexport const rendererStateRef: {| current: RendererState |} = {\n  current: { uniqueID: 0 }\n}\nexport const initRendererState = (): RendererState =>\n  (rendererStateRef.current = { uniqueID: 0 })\nexport const setCurrentRendererState = (state: RendererState) =>\n  (rendererStateRef.current = state)\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  )\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is\n\nexport default objectIs\n","// @flow\n// Source: https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js\n\nimport { readContextValue } from './context'\nimport { rendererStateRef } from './state'\nimport is from './objectIs'\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  AbstractContext,\n  BasicStateAction,\n  Dispatch,\n  Update,\n  UpdateQueue,\n  Hook\n} from '../types'\n\nexport opaque type Identity = {}\nexport opaque type OpaqueIDType = string\n\nlet currentIdentity: Identity | null = null\n\nexport const makeIdentity = (): Identity => ({})\n\nexport const setCurrentIdentity = (id: Identity | null) => {\n  currentIdentity = id\n}\n\nexport const getCurrentIdentity = (): Identity => {\n  if (currentIdentity === null) {\n    throw new Error(\n      '[react-ssr-prepass] Hooks can only be called inside the body of a function component. ' +\n        '(https://fb.me/react-invalid-hook-call)'\n    )\n  }\n\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L63-L71\n\n  return (currentIdentity: Identity)\n}\n\nlet firstWorkInProgressHook: Hook | null = null\nlet workInProgressHook: Hook | null = null\n// Whether an update was scheduled during the currently executing render pass.\nlet didScheduleRenderPhaseUpdate: boolean = false\n// Lazily created map of render-phase updates\nlet renderPhaseUpdates: Map<UpdateQueue<any>, Update<any>> | null = null\n// Counter to prevent infinite loops.\nlet numberOfReRenders: number = 0\nconst RE_RENDER_LIMIT = 25\n\nexport const getFirstHook = (): Hook | null => firstWorkInProgressHook\n\nexport const setFirstHook = (hook: Hook | null) => {\n  firstWorkInProgressHook = hook\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null\n) {\n  // NOTE: The warnings that are used in ReactPartialRendererHooks are obsolete\n  // in a prepass, since these issues will be caught by a subsequent renderer anyway\n  if (prevDeps === null) return false\n\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (!is(nextDeps[i], prevDeps[i])) return false\n  }\n\n  return true\n}\n\nfunction createHook(): Hook {\n  return {\n    memoizedState: null,\n    queue: null,\n    next: null\n  }\n}\n\nfunction createWorkInProgressHook(): Hook {\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    if (firstWorkInProgressHook === null) {\n      return (firstWorkInProgressHook = workInProgressHook = createHook())\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      return (workInProgressHook = firstWorkInProgressHook)\n    }\n  } else {\n    if (workInProgressHook.next === null) {\n      // Append to the end of the list\n      return (workInProgressHook = workInProgressHook.next = createHook())\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      return (workInProgressHook = workInProgressHook.next)\n    }\n  }\n}\n\nexport function renderWithHooks(\n  Component: any,\n  props: any,\n  refOrContext: any\n): any {\n  workInProgressHook = null\n  let children = Component(props, refOrContext)\n\n  // NOTE: Excessive rerenders won't throw but will instead abort rendering\n  // since a subsequent renderer can throw when this issue occurs instead\n  while (numberOfReRenders < RE_RENDER_LIMIT && didScheduleRenderPhaseUpdate) {\n    // Updates were scheduled during the render phase. They are stored in\n    // the `renderPhaseUpdates` map. Call the component again, reusing the\n    // work-in-progress hooks and applying the additional updates on top. Keep\n    // restarting until no more updates are scheduled.\n    didScheduleRenderPhaseUpdate = false\n    numberOfReRenders += 1\n    // Start over from the beginning of the list\n    workInProgressHook = null\n    children = Component(props, refOrContext)\n  }\n\n  // This will be reset by renderer\n  // firstWorkInProgressHook = null\n\n  numberOfReRenders = 0\n  renderPhaseUpdates = null\n  workInProgressHook = null\n\n  return children\n}\n\nfunction readContext(context: AbstractContext, _: void | number | boolean) {\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L215-L223\n  return readContextValue(context)\n}\n\nfunction useContext(context: AbstractContext, _: void | number | boolean) {\n  getCurrentIdentity()\n  return readContextValue(context)\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe\n  return typeof action === 'function' ? action(state) : action\n}\n\nfunction useState<S>(\n  initialState: (() => S) | S\n): [S, Dispatch<BasicStateAction<S>>] {\n  return useReducer(\n    basicStateReducer,\n    // useReducer has a special case to support lazy useState initializers\n    (initialState: any)\n  )\n}\n\nfunction useReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: (I) => S\n): [S, Dispatch<A>] {\n  const id = getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  // In the case of a re-render after a suspense, the initial state\n  // may not be set, so instead of initialising if `!isRerender`, we\n  // check whether `queue` is set\n  if (workInProgressHook.queue === null) {\n    let initialState\n    if (reducer === basicStateReducer) {\n      // Special case for `useState`.\n      initialState =\n        typeof initialArg === 'function'\n          ? ((initialArg: any): () => S)()\n          : ((initialArg: any): S)\n    } else {\n      initialState =\n        init !== undefined ? init(initialArg) : ((initialArg: any): S)\n    }\n\n    workInProgressHook.memoizedState = initialState\n  }\n\n  const queue: UpdateQueue<A> =\n    workInProgressHook.queue ||\n    (workInProgressHook.queue = { last: null, dispatch: null })\n  const dispatch: Dispatch<A> =\n    queue.dispatch || (queue.dispatch = dispatchAction.bind(null, id, queue))\n\n  if (renderPhaseUpdates !== null) {\n    // This is a re-render. Apply the new render phase updates to the previous\n    // current hook.\n    // Render phase updates are stored in a map of queue -> linked list\n    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n    if (firstRenderPhaseUpdate !== undefined) {\n      renderPhaseUpdates.delete(queue)\n      let newState = workInProgressHook.memoizedState\n      let update = firstRenderPhaseUpdate\n      do {\n        // Process this render phase update. We don't have to check the\n        // priority because it will always be the same as the current\n        // render's.\n        const action = update.action\n        newState = reducer(newState, action)\n        update = update.next\n      } while (update !== null)\n\n      workInProgressHook.memoizedState = newState\n    }\n  }\n\n  return [workInProgressHook.memoizedState, dispatch]\n}\n\nfunction useMemo<T>(nextCreate: () => T, deps: Array<mixed> | void | null): T {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  const nextDeps = deps === undefined ? null : deps\n  const prevState = workInProgressHook.memoizedState\n  if (prevState !== null && nextDeps !== null) {\n    const prevDeps = prevState[1]\n    if (areHookInputsEqual(nextDeps, prevDeps)) {\n      return prevState[0]\n    }\n  }\n\n  const nextValue = nextCreate()\n  workInProgressHook.memoizedState = [nextValue, nextDeps]\n  return nextValue\n}\n\nfunction useRef<T>(initialValue: T): { current: T } {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n  const previousRef = workInProgressHook.memoizedState\n  if (previousRef === null) {\n    const ref = { current: initialValue }\n    workInProgressHook.memoizedState = ref\n    return ref\n  } else {\n    return previousRef\n  }\n}\n\nfunction useOpaqueIdentifier(): OpaqueIDType {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n  if (!workInProgressHook.memoizedState)\n    workInProgressHook.memoizedState =\n      'R:' + (rendererStateRef.current.uniqueID++).toString(36)\n  return workInProgressHook.memoizedState\n}\n\nfunction dispatchAction<A>(\n  componentIdentity: Identity,\n  queue: UpdateQueue<A>,\n  action: A\n) {\n  if (componentIdentity === currentIdentity) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdate = true\n    const update: Update<A> = {\n      action,\n      next: null\n    }\n    if (renderPhaseUpdates === null) {\n      renderPhaseUpdates = new Map()\n    }\n    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n    if (firstRenderPhaseUpdate === undefined) {\n      renderPhaseUpdates.set(queue, update)\n    } else {\n      // Append the update to the end of the list.\n      let lastRenderPhaseUpdate = firstRenderPhaseUpdate\n      while (lastRenderPhaseUpdate.next !== null) {\n        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next\n      }\n      lastRenderPhaseUpdate.next = update\n    }\n  } else {\n    // This means an update has happened after the function component has\n    // returned. On the server this is a no-op. In React Fiber, the update\n    // would be scheduled for a future render.\n  }\n}\n\nfunction useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  return useMemo(() => callback, deps)\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  _subscribe: MutableSourceSubscribeFn<Source, Snapshot>\n): Snapshot {\n  getCurrentIdentity()\n  return getSnapshot(source._source)\n}\n\nfunction noop(): void {}\n\nfunction useTransition(): [(callback: () => void) => void, boolean] {\n  const startTransition = (callback) => {\n    callback()\n  }\n  return [startTransition, false]\n}\n\nfunction useDeferredValue<T>(input: T): T {\n  return input\n}\n\nexport const Dispatcher = {\n  readContext,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n  useCallback,\n  useMutableSource,\n  useTransition,\n  useDeferredValue,\n  useOpaqueIdentifier,\n  // ignore useLayout effect completely as usage of it will be caught\n  // in a subsequent render pass\n  useLayoutEffect: noop,\n  // useImperativeHandle is not run in the server environment\n  useImperativeHandle: noop,\n  // Effects are not run in the server environment.\n  useEffect: noop,\n  // Debugging effect\n  useDebugValue: noop\n}\n","// @flow\n\nimport { createElement, type Node } from 'react'\nimport type {\n  LazyComponent,\n  LazyComponentPayload,\n  DefaultProps,\n  LazyFrame,\n  Frame\n} from '../types'\nimport { getChildrenArray } from '../element'\n\nimport {\n  setCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame\n} from '../internals'\n\nconst resolve = (type: LazyComponent): Promise<void> => {\n  const payload = (type._payload || type: any)\n  if (payload._status === 0) {\n    return payload._result\n  } else if (payload._status === 1) {\n    return Promise.resolve(payload._result)\n  } else if (payload._status === 2) {\n    return Promise.reject(payload._result)\n  }\n\n  payload._status = 0 /* PENDING */\n\n  return (payload._result = (payload._ctor || payload._result)()\n    .then((Component) => {\n      payload._result = Component\n      if (typeof Component === 'function') {\n        payload._status = 1 /* SUCCESSFUL */\n      } else if (\n        Component !== null &&\n        typeof Component === 'object' &&\n        typeof Component.default === 'function'\n      ) {\n        payload._result = Component.default\n        payload._status = 1 /* SUCCESSFUL */\n      } else {\n        payload._status = 2 /* FAILED */\n      }\n    })\n    .catch((error) => {\n      payload._status = 2 /* FAILED */\n      payload._result = error\n      return Promise.reject(error)\n    }))\n}\n\nconst render = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // Component has previously been fetched successfully,\n  // so create the element with passed props and return it\n  const payload = ((type._payload || type: any): LazyComponentPayload)\n  if (payload._status === 1) {\n    return createElement(payload._result, props)\n  }\n\n  return null\n}\n\nexport const mount = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // If the component has not been fetched yet, suspend this component\n  const payload = ((type._payload || type: any): LazyComponentPayload)\n  if (payload._status <= 0) {\n    queue.push({\n      kind: 'frame.lazy',\n      contextMap: getCurrentContextMap(),\n      contextStore: getCurrentContextStore(),\n      errorFrame: getCurrentErrorFrame(),\n      thenable: resolve(type),\n      props,\n      type\n    })\n\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\nexport const update = (queue: Frame[], frame: LazyFrame): Node => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Hook,\n  Frame,\n  HooksFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  type Identity,\n  maskContext,\n  makeIdentity,\n  setCurrentIdentity,\n  getCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  renderWithHooks,\n  setFirstHook,\n  getFirstHook\n} from '../internals'\n\nconst makeFrame = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  thenable: Promise<any>\n) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  id: getCurrentIdentity(),\n  hook: getFirstHook(),\n  kind: 'frame.hooks',\n  errorFrame: getCurrentErrorFrame(),\n  thenable,\n  props,\n  type\n})\n\nconst render = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  try {\n    return renderWithHooks(\n      type,\n      computeProps(props, type.defaultProps),\n      maskContext(type)\n    )\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      throw error\n    }\n\n    queue.push(makeFrame(type, props, error))\n    return null\n  }\n}\n\n/** Mount a function component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n): Node => {\n  setFirstHook(null)\n  setCurrentIdentity(makeIdentity())\n\n  const promise = visitor(element)\n  if (promise) {\n    queue.push(makeFrame(type, props, promise))\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\n/** Update a previously suspended function component */\nexport const update = (queue: Frame[], frame: HooksFrame) => {\n  setFirstHook(frame.hook)\n  setCurrentIdentity(frame.id)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Frame,\n  ClassFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  maskContext,\n  assignContextMap,\n  setCurrentIdentity,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame\n} from '../internals'\n\nconst RE_RENDER_LIMIT = 25\n\nconst createUpdater = () => {\n  const queue = []\n\n  return {\n    _thrown: 0,\n    queue,\n    isMounted: () => false,\n    enqueueForceUpdate: () => null,\n    enqueueReplaceState: (instance, completeState) => {\n      if (instance._isMounted) {\n        queue.length = 0\n        queue.push(completeState)\n      }\n    },\n    enqueueSetState: (instance, currentPartialState) => {\n      if (instance._isMounted) {\n        queue.push(currentPartialState)\n      }\n    }\n  }\n}\n\nconst flushEnqueuedState = (instance: any) => {\n  const queue = (instance.updater.queue: any[])\n\n  if (queue.length > 0) {\n    let nextState = Object.assign({}, instance.state)\n\n    for (let i = 0, l = queue.length; i < l; i++) {\n      const partial = queue[i]\n      const partialState =\n        typeof partial === 'function'\n          ? partial.call(instance, nextState, instance.props, instance.context)\n          : partial\n      if (partialState !== null) {\n        Object.assign(nextState, partialState)\n      }\n    }\n\n    instance.state = nextState\n    queue.length = 0\n  }\n}\n\nconst createInstance = (type: any, props: DefaultProps) => {\n  const updater = createUpdater()\n  const computedProps = computeProps(props, type.defaultProps)\n  const context = maskContext(type)\n  const instance = new type(computedProps, context, updater)\n\n  instance.props = computedProps\n  instance.context = context\n  instance.updater = updater\n  instance._isMounted = true\n\n  if (instance.state === undefined) {\n    instance.state = null\n  }\n\n  if (\n    typeof instance.componentDidCatch === 'function' ||\n    typeof type.getDerivedStateFromError === 'function'\n  ) {\n    const frame = makeFrame(type, instance, null)\n    frame.errorFrame = frame\n    setCurrentErrorFrame(frame)\n  }\n\n  if (typeof type.getDerivedStateFromProps === 'function') {\n    const { getDerivedStateFromProps } = type\n    const state = getDerivedStateFromProps(instance.props, instance.state)\n    if (state !== null && state !== undefined) {\n      instance.state = Object.assign({}, instance.state, state)\n    }\n  } else if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount()\n  } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount()\n  }\n\n  return instance\n}\n\nconst makeFrame = (\n  type: any,\n  instance: any,\n  thenable: Promise<any> | null\n) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  errorFrame: getCurrentErrorFrame(),\n  thenable,\n  kind: 'frame.class',\n  error: null,\n  instance,\n  type\n})\n\nconst render = (type: any, instance: any, queue: Frame[]) => {\n  // Flush all queued up state changes\n  flushEnqueuedState(instance)\n  let child: Node = null\n\n  try {\n    child = instance.render()\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      throw error\n    }\n\n    queue.push(makeFrame(type, instance, error))\n    return null\n  }\n\n  if (\n    type.childContextTypes !== undefined &&\n    typeof instance.getChildContext === 'function'\n  ) {\n    const childContext = instance.getChildContext()\n    if (childContext !== null && typeof childContext === 'object') {\n      assignContextMap(childContext)\n    }\n  }\n\n  if (\n    typeof instance.getDerivedStateFromProps !== 'function' &&\n    (typeof instance.componentWillMount === 'function' ||\n      typeof instance.UNSAFE_componentWillMount === 'function') &&\n    typeof instance.componentWillUnmount === 'function'\n  ) {\n    try {\n      instance.componentWillUnmount()\n    } catch (_err) {}\n  }\n\n  instance._isMounted = false\n  return child\n}\n\n/** Mount a class component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n) => {\n  setCurrentIdentity(null)\n\n  const instance = createInstance(type, props)\n  const promise = visitor(element, instance)\n  if (promise) {\n    queue.push(makeFrame(type, instance, promise))\n    return null\n  }\n\n  return render(type, instance, queue)\n}\n\n/** Update a previously suspended class component */\nexport const update = (queue: Frame[], frame: ClassFrame) => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n\n  if (frame.error) {\n    // We simply have to bail when a loop occurs\n    if (++frame.instance.updater._thrown >= RE_RENDER_LIMIT) return null\n\n    frame.instance._isMounted = true\n\n    if (typeof frame.instance.componentDidCatch === 'function') {\n      frame.instance.componentDidCatch(frame.error)\n    }\n\n    if (typeof frame.type.getDerivedStateFromError === 'function') {\n      frame.instance.updater.enqueueSetState(\n        frame.instance,\n        frame.type.getDerivedStateFromError(frame.error)\n      )\n    }\n  }\n\n  return render(frame.type, frame.instance, queue)\n}\n","// @flow\n\nimport React, { type Node, type ComponentType, createElement } from 'react'\n\nimport {\n  typeOf,\n  shouldConstruct,\n  getChildrenArray,\n  computeProps\n} from './element'\n\nimport {\n  mountFunctionComponent,\n  updateFunctionComponent,\n  mountClassComponent,\n  updateClassComponent,\n  mountLazyComponent,\n  updateLazyComponent\n} from './render'\n\nimport type {\n  Visitor,\n  YieldFrame,\n  ClassFrame,\n  Frame,\n  ContextMap,\n  ContextEntry,\n  DefaultProps,\n  ComponentStatics,\n  LazyElement,\n  AbstractElement,\n  ConsumerElement,\n  ProviderElement,\n  FragmentElement,\n  SuspenseElement,\n  ForwardRefElement,\n  MemoElement,\n  UserElement,\n  DOMElement\n} from './types'\n\nimport {\n  getCurrentContextMap,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  setCurrentContextStore,\n  flushPrevContextMap,\n  flushPrevContextStore,\n  restoreContextMap,\n  restoreContextStore,\n  readContextValue,\n  setContextValue,\n  setCurrentIdentity,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  Dispatcher\n} from './internals'\n\nimport {\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\nconst {\n  ReactCurrentDispatcher\n} = (React: any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\n// In the presence of setImmediate, i.e. on Node, we'll enable the\n// yielding behavior that gives the event loop a chance to continue\n// running when the prepasses would otherwise take too long\nexport const SHOULD_YIELD = typeof setImmediate === 'function'\n// Time in ms after which the otherwise synchronous visitor yields so that\n// the event loop is not interrupted for too long\nconst YIELD_AFTER_MS = 5\n\nconst render = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n) => {\n  return shouldConstruct(type)\n    ? mountClassComponent(type, props, queue, visitor, element)\n    : mountFunctionComponent(type, props, queue, visitor, element)\n}\n\nexport const visitElement = (\n  element: AbstractElement,\n  queue: Frame[],\n  visitor: Visitor\n): AbstractElement[] => {\n  switch (typeOf(element)) {\n    case REACT_SUSPENSE_TYPE:\n    case REACT_STRICT_MODE_TYPE:\n    case REACT_CONCURRENT_MODE_TYPE:\n    case REACT_PROFILER_TYPE:\n    case REACT_FRAGMENT_TYPE: {\n      // These element types are simply traversed over but otherwise ignored\n      const fragmentElement = ((element: any):\n        | FragmentElement\n        | SuspenseElement)\n      return getChildrenArray(fragmentElement.props.children)\n    }\n\n    case REACT_PROVIDER_TYPE: {\n      const providerElement = ((element: any): ProviderElement)\n      // Add provider's value prop to context\n      const { value, children } = providerElement.props\n      setContextValue(providerElement.type._context, value)\n\n      return getChildrenArray(children)\n    }\n\n    case REACT_CONTEXT_TYPE: {\n      const consumerElement = ((element: any): ConsumerElement)\n      const { children } = consumerElement.props\n\n      // Read from context and call children, if it's been passed\n      if (typeof children === 'function') {\n        const type = (consumerElement.type: any)\n        const context = typeof type._context === 'object' ? type._context : type\n        const value = readContextValue(context)\n        return getChildrenArray(children(value))\n      } else {\n        return []\n      }\n    }\n\n    case REACT_LAZY_TYPE: {\n      const lazyElement = ((element: any): LazyElement)\n      const type = lazyElement.type\n      const child = mountLazyComponent(type, lazyElement.props, queue)\n      return getChildrenArray(child)\n    }\n\n    case REACT_MEMO_TYPE: {\n      const memoElement = ((element: any): MemoElement)\n      const { type } = memoElement.type\n      const child = createElement((type: any), memoElement.props)\n      return getChildrenArray(child)\n    }\n\n    case REACT_FORWARD_REF_TYPE: {\n      const refElement = ((element: any): ForwardRefElement)\n      const { render: type, defaultProps } = refElement.type\n      const props = computeProps(refElement.props, defaultProps)\n      const child = createElement((type: any), props)\n      return getChildrenArray(child)\n    }\n\n    case REACT_ELEMENT_TYPE: {\n      const el = ((element: any): UserElement | DOMElement)\n      if (typeof el.type === 'string') {\n        // String elements can be skipped, so we just return children\n        return getChildrenArray(el.props.children)\n      } else {\n        const userElement = ((element: any): UserElement)\n        const { type, props } = userElement\n        const child = render(type, props, queue, visitor, userElement)\n        return getChildrenArray(child)\n      }\n    }\n\n    case REACT_PORTAL_TYPE:\n    // Portals are unsupported during SSR since they're DOM-only\n    default:\n      return []\n  }\n}\n\nconst visitLoop = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>,\n  traversalErrorFrame: Array<null | ClassFrame>,\n  queue: Frame[],\n  visitor: Visitor\n): boolean => {\n  const prevDispatcher = ReactCurrentDispatcher.current\n  const start = Date.now()\n\n  try {\n    ReactCurrentDispatcher.current = Dispatcher\n    while (traversalChildren.length > 0) {\n      const element = traversalChildren[traversalChildren.length - 1].shift()\n      if (element !== undefined) {\n        const children = visitElement(element, queue, visitor)\n        traversalChildren.push(children)\n        traversalMap.push(flushPrevContextMap())\n        traversalStore.push(flushPrevContextStore())\n        traversalErrorFrame.push(getCurrentErrorFrame())\n      } else {\n        traversalChildren.pop()\n        restoreContextMap(traversalMap.pop())\n        restoreContextStore(traversalStore.pop())\n        setCurrentErrorFrame(traversalErrorFrame.pop())\n      }\n\n      if (SHOULD_YIELD && Date.now() - start > YIELD_AFTER_MS) {\n        return true\n      }\n    }\n\n    return false\n  } catch (error) {\n    const errorFrame = getCurrentErrorFrame()\n    if (!errorFrame) throw error\n    errorFrame.error = error\n    queue.unshift(errorFrame)\n    return false\n  } finally {\n    ReactCurrentDispatcher.current = prevDispatcher\n  }\n}\n\nconst makeYieldFrame = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>,\n  traversalErrorFrame: Array<null | ClassFrame>\n): Frame => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  errorFrame: getCurrentErrorFrame(),\n  thenable: null,\n  kind: 'frame.yield',\n  traversalChildren,\n  traversalMap,\n  traversalStore,\n  traversalErrorFrame\n})\n\nexport const visit = (\n  init: AbstractElement[],\n  queue: Frame[],\n  visitor: Visitor\n) => {\n  const traversalChildren: AbstractElement[][] = [init]\n  const traversalMap: Array<void | ContextMap> = [flushPrevContextMap()]\n  const traversalStore: Array<void | ContextEntry> = [flushPrevContextStore()]\n  const traversalErrorFrame: Array<null | ClassFrame> = [getCurrentErrorFrame()]\n\n  const hasYielded = visitLoop(\n    traversalChildren,\n    traversalMap,\n    traversalStore,\n    traversalErrorFrame,\n    queue,\n    visitor\n  )\n\n  if (hasYielded) {\n    queue.unshift(\n      makeYieldFrame(\n        traversalChildren,\n        traversalMap,\n        traversalStore,\n        traversalErrorFrame\n      )\n    )\n  }\n}\n\nexport const update = (frame: Frame, queue: Frame[], visitor: Visitor) => {\n  if (frame.kind === 'frame.yield') {\n    setCurrentIdentity(null)\n    setCurrentContextMap(frame.contextMap)\n    setCurrentContextStore(frame.contextStore)\n    setCurrentErrorFrame(frame.errorFrame)\n\n    const hasYielded = visitLoop(\n      frame.traversalChildren,\n      frame.traversalMap,\n      frame.traversalStore,\n      frame.traversalErrorFrame,\n      queue,\n      visitor\n    )\n\n    if (hasYielded) {\n      queue.unshift(\n        makeYieldFrame(\n          frame.traversalChildren,\n          frame.traversalMap,\n          frame.traversalStore,\n          frame.traversalErrorFrame\n        )\n      )\n    }\n  } else {\n    const prevDispatcher = ReactCurrentDispatcher.current\n    let children = null\n\n    ReactCurrentDispatcher.current = Dispatcher\n\n    try {\n      if (frame.kind === 'frame.class') {\n        children = updateClassComponent(queue, frame)\n      } else if (frame.kind === 'frame.hooks') {\n        children = updateFunctionComponent(queue, frame)\n      } else if (frame.kind === 'frame.lazy') {\n        children = updateLazyComponent(queue, frame)\n      }\n    } catch (error) {\n      const errorFrame = getCurrentErrorFrame()\n      if (!errorFrame) throw error\n      errorFrame.error = error\n      queue.unshift(errorFrame)\n      children = null\n    } finally {\n      ReactCurrentDispatcher.current = prevDispatcher\n    }\n\n    visit(getChildrenArray(children), queue, visitor)\n  }\n}\n","// @flow\n\nimport { type Node, type Element } from 'react'\nimport type {\n  Visitor,\n  YieldFrame,\n  Frame,\n  AbstractElement,\n  RendererState\n} from './types'\nimport { visit, update, SHOULD_YIELD } from './visitor'\nimport { getChildrenArray } from './element'\n\nimport {\n  setCurrentContextStore,\n  setCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  setCurrentRendererState,\n  initRendererState,\n  Dispatcher\n} from './internals'\n\n/** visit() walks all elements (depth-first) and while it walks the\n    element tree some components will suspend and put a `Frame` onto\n    the queue. Hence we recursively look at suspended components in\n    this queue, wait for their promises to resolve, and continue\n    calling visit() on their children. */\nconst flushFrames = (\n  queue: Frame[],\n  visitor: Visitor,\n  state: RendererState\n): Promise<void> => {\n  const frame = queue.shift()\n  if (!frame) {\n    return Promise.resolve()\n  }\n\n  if (SHOULD_YIELD && frame.kind === 'frame.yield') {\n    frame.thenable = new Promise((resolve, reject) => {\n      setImmediate(resolve)\n    })\n  }\n\n  return Promise.resolve(frame.thenable).then(\n    () => {\n      setCurrentRendererState(state)\n      update(frame, queue, visitor)\n      return flushFrames(queue, visitor, state)\n    },\n    (error: Error) => {\n      if (!frame.errorFrame) throw error\n      frame.errorFrame.error = error\n      update(frame.errorFrame, queue, visitor)\n    }\n  )\n}\n\nconst defaultVisitor = () => undefined\n\nconst renderPrepass = (element: Node, visitor?: Visitor): Promise<void> => {\n  if (!visitor) visitor = defaultVisitor\n\n  const queue: Frame[] = []\n  // Renderer state is kept globally but restored and\n  // passed around manually since it isn't dependent on the\n  // render tree\n  const state = initRendererState()\n  // Context state is kept globally and is modified in-place.\n  // Before we start walking the element tree we need to reset\n  // its current state\n  setCurrentContextMap({})\n  setCurrentContextStore(new Map())\n  setCurrentErrorFrame(null)\n\n  try {\n    visit(getChildrenArray(element), queue, visitor)\n  } catch (error) {\n    return Promise.reject(error)\n  }\n\n  return flushFrames(queue, visitor, state)\n}\n\nexport default renderPrepass\n"],"names":["this","let","ConcurrentMode","ForwardRef","Suspense","Memo","Lazy","Symbol","symbolFor","const","REACT_ELEMENT_TYPE","Element","REACT_PORTAL_TYPE","Portal","REACT_FRAGMENT_TYPE","Fragment","REACT_STRICT_MODE_TYPE","StrictMode","REACT_PROFILER_TYPE","Profiler","REACT_PROVIDER_TYPE","ContextProvider","REACT_CONTEXT_TYPE","ContextConsumer","REACT_CONCURRENT_MODE_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","toArray","Children","node","isAbstractElement","props","defaultProps","Object","currentContextStore","Map","currentContextMap","prevContextMap","undefined","prevContextEntry","prev","map","store","context","value","emptyContext","type","contextType","contextTypes","name","maskedContext","currentErrorFrame","rendererStateRef","current","uniqueID","objectIs","x","y","currentIdentity","firstWorkInProgressHook","workInProgressHook","didScheduleRenderPhaseUpdate","renderPhaseUpdates","numberOfReRenders","createWorkInProgressHook","memoizedState","queue","next","basicStateReducer","state","action","useReducer","reducer","initialArg","init","id","getCurrentIdentity","initialState","last","dispatch","dispatchAction","firstRenderPhaseUpdate","newState","update","useMemo","nextCreate","deps","prevState","nextDeps","a","prevDeps","i","is","areHookInputsEqual","nextValue","componentIdentity","lastRenderPhaseUpdate","noop","callback","Dispatcher","readContext","useContext","useRef","initialValue","previousRef","ref","useState","useCallback","useMutableSource","source","getSnapshot","useTransition","useDeferredValue","input","useOpaqueIdentifier","useLayoutEffect","useImperativeHandle","useEffect","useDebugValue","payload","Component","error","createElement","thenable","contextMap","contextStore","hook","kind","errorFrame","computeProps","maskContext","children","refOrContext","RE_RENDER_LIMIT$1","makeFrame","instance","nextState","l","partial","partialState","child","childContext","_err","ReactCurrentDispatcher","React","SHOULD_YIELD","element","visitor","typeOf","getChildrenArray","readContextValue","lazyElement","resolve","render","shouldConstruct","updater","_thrown","isMounted","enqueueForceUpdate","enqueueReplaceState","completeState","enqueueSetState","currentPartialState","createUpdater","computedProps","mountClassComponent","frame","promise","mountFunctionComponent","traversalChildren","traversalMap","traversalStore","traversalErrorFrame","prevDispatcher","start","Date","visitElement","flushPrevContextMap","flushPrevContextStore","YIELD_AFTER_MS","makeYieldFrame","setCurrentContextMap","setCurrentContextStore","visitLoop","RE_RENDER_LIMIT","visit","setImmediate","Promise","e","flushFrames"],"mappings":"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"}